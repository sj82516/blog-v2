<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>應用開發 on Yuanchieh</title><link>https://yuanchieh.page/categories/%E6%87%89%E7%94%A8%E9%96%8B%E7%99%BC/</link><description>Recent content in 應用開發 on Yuanchieh</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 16 Feb 2021 08:21:40 +0000</lastBuildDate><atom:link href="https://yuanchieh.page/categories/%E6%87%89%E7%94%A8%E9%96%8B%E7%99%BC/index.xml" rel="self" type="application/rss+xml"/><item><title>【極速開發+】上課與練習心得</title><link>https://yuanchieh.page/posts/2021/2021-02-16-%E6%A5%B5%E9%80%9F%E9%96%8B%E7%99%BC-%E4%B8%8A%E8%AA%B2%E8%88%87%E7%B7%B4%E7%BF%92%E5%BF%83%E5%BE%97/</link><pubDate>Tue, 16 Feb 2021 08:21:40 +0000</pubDate><guid>https://yuanchieh.page/posts/2021/2021-02-16-%E6%A5%B5%E9%80%9F%E9%96%8B%E7%99%BC-%E4%B8%8A%E8%AA%B2%E8%88%87%E7%B7%B4%E7%BF%92%E5%BF%83%E5%BE%97/</guid><description>&lt;p>朋友於 2018 年就去上了 91 老師的課，不斷的大推極速開發與 TDD，當時想說一堂課一兩萬也太驚人，後來朋友直接現場 Demo，就此打破我的世界觀，沒有想到寫程式可以流暢成這種地步，報名幾次都沒有搶到票，最後報到 2021/01 的課程，如果想要報名，記得要再開放第一天就搶票喔！&lt;/p>
&lt;blockquote>
&lt;p>絕對物超所值&lt;/p>
&lt;/blockquote>
&lt;p>經過四週的練習，目前 Tennis Kata 使用 WebStorm + ES6 開發，可以在 15 分鐘完成，跟那些壓在10分鐘以內的神人同學相比還差很遠，但想說還是可以用自己的角度分享練習的過程&lt;/p>
&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/dEIQ1gHEu8g"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;h2 id="前情提要">前情提要&lt;/h2>
&lt;p>&lt;a class="link" href="https://dotblogs.com.tw/hatelove/2019/06/17/extreme-developing-training-202002" target="_blank" rel="noopener"
>91 部落格【極速開發+】&lt;/a> 中明確提到&lt;/p>
&lt;blockquote>
&lt;p>我認同「時間不夠」是個問題，然而卻很少人去改善或解決這個問題。這門課，將讓各位學到，如何建立自我刻意練習的模型，將所有工具的整合起來發揮最大綜效，透過正確的開發方式與順序，讓你寫代碼時能行雲流水，並且兼顧設計、品質與生產力。&lt;/p>
&lt;/blockquote>
&lt;p>一開始聽朋友分享，會覺得&lt;code>熟悉工具使用好像很 low，身為工程師應該更專注於演算法、架構層面&lt;/code>，但殊不知自己一天的工作時間都浪費在無謂的鍵盤按鍵與滑鼠移動&lt;/p>
&lt;p>上課的第一個課程是，兩兩一組，一人寫 Tennis Kata，另一個人紀錄寫程式的人浪費多少無謂的方向鍵，或是在怎樣的場景使用滑鼠，這無關乎熟不熟悉 Tennis Kata，而是對於&lt;code>寫程式這項技藝是否簡潔到沒有多餘的動作&lt;/code>&lt;/p>
&lt;p>在寫測試案例，我們是否每次都要重新打&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">it&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;....&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()=&amp;gt;{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(...).&lt;/span>&lt;span class="nx">toBe&lt;/span>&lt;span class="p">(...)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我們眼睛盯著程式碼第 100 行的 name 這個詞，是否能夠很精準又快速跳到單字上，並重新命名為 firstName 然後套用到所有的引用上？&lt;/p>
&lt;p>上完課最震撼的是，自己從沒有抽絲剝繭「寫程式」這件事，而明明有好的工具 / 好的方法，為什麼不用呢？！&lt;/p>
&lt;h2 id="如何練習">如何練習&lt;/h2>
&lt;p>上完課 91 笑著說，每天只練 30 分鐘就好，因為多練也可能是重複錯誤的動作，遵守老師的吩咐，我固定每天早上練習 30 分鐘，雖然有時候會超過，但盡量不要讓自己練習到心煩，避免容易中斷習慣&lt;/p>
&lt;h3 id="第一週練習">第一週練習&lt;/h3>
&lt;p>第一週算是最痛苦，但好在也是剛上完課能量最強的時候，focus 在 tune IDE 上，從原本的 VSCode 轉移至 Webstorm 的陣痛期，主要調整&lt;/p>
&lt;ol>
&lt;li>Nodejs 環境設定：因為想要 ESM 所以要打開設定參數 (Nodejs v14 以前)&lt;/li>
&lt;li>排版：幫忙補上；等 / 去除多餘的斷行 / 換字體等等&lt;/li>
&lt;li>調整 .ideavimrm&lt;br>
這部分很花時間，但很建議自己掃過整個檔案，把多餘的指令移除，並確保自己大概知道每個指令的含義，尤其是 zr 系列&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">zri: inline
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zrp: 抽參數
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zrm: 抽方法
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zrf: 抽成 field
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zrn: 我自己加的，refactor element
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>像是用 Mac 開發，要使用 F1~F12 都很痛苦，我就去查 &lt;code>:actionlist&lt;/code> 找出 idealvim 支援的 action，或是查這一分 &lt;a class="link" href="https://gist.github.com/zchee/9c78f91cc5ad771c1f5d" target="_blank" rel="noopener"
>IdeaVim actionlist&lt;/a>&lt;br>
雖然設定 keymap 也可以，但想說能夠用一套就全部用一套，所以切換檔案我也重新綁過&lt;/p>
&lt;p>第一週只做到 tune ide，並練習到 &amp;rsquo;thirty love&amp;rsquo;，並熟悉 zr 系列的快捷鍵&lt;/p>
&lt;h3 id="第二週">第二週&lt;/h3>
&lt;p>接下來挑戰寫完整個 tennis，速度大概在 22~25 分鐘，每天固定先看一次老師的影片，注意自己很卡的地方老師怎麼寫，例如補 &amp;rsquo;this.&amp;rsquo; / 補 ; 補 , 等等，慢慢修掉一些壞習慣，盡可能每次練習只專注在三個點上面，也慢慢更熟悉使用 j / k / w / b 移動，&lt;code>時時提醒自己想不出來也不可以自暴自棄用方向鍵跟滑鼠，停下來看老師的影片&lt;/code>&lt;/p>
&lt;h3 id="第三週">第三週&lt;/h3>
&lt;p>自己練習速度卡在 22 分鐘上下，發現是後半段太不熟練，決定專攻後半段，用 git 保存進度，每天 reset 反覆練習，一樣是先看老師的影片配早餐，接著用便條紙寫下要改進的三個點，如果遇到自己很卡的地方，&lt;code>直接修改 .ideavimrc&lt;/code>&lt;/p>
&lt;p>這一週速度的進步來自&lt;/p>
&lt;ol>
&lt;li>&lt;code>更多採用 Acejump&lt;/code>&lt;br>
一開始下意識都是用 j/k/w/b 去移動，開始有意識練習用 Acejump，這邊也很感謝同梯同學在群組中不斷討論最佳寫法&lt;/li>
&lt;li>練習 &lt;code>vim surround&lt;/code> 優化 Math.abs 編寫&lt;br>
可以參考這份 gist &lt;a class="link" href="https://gist.github.com/wilon/ac1fc66f4a79e7b0c161c80877c75c94" target="_blank" rel="noopener"
>vim-surround使用指南.MD&lt;/a>，如果要針對已選取的部分要用 &lt;code>S&lt;/code> 加上對稱符號&lt;/li>
&lt;li>取消 Webstorm 抽參數時補上預設&lt;br>
假設以下要把 &amp;ldquo;joey&amp;rdquo; 抽成參數，我的預設會是帶入預設值，這樣會讓原本在初始化 Tennis 時不會自動補上 new Tennis(&amp;ldquo;joey&amp;rdquo;)&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">constructor&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">firstPlayerName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;joey&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">firstPlayerName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;joey&amp;#34;&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">firstPlayerName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">firstPlayerName&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在抽參數時會有小提示，記得要點掉&lt;br>
&lt;img src="https://yuanchieh.page/post/2021/img/0126/default-param.png"
loading="lazy"
>&lt;/p>
&lt;p>另一個練習是檔案目錄操作，例如說多建一個 folder / 把檔案移動過去 / 刪除檔案這些，原本 Tennis 沒有練到這部分，但實務上這些動作很需要，就有花額外的時間練習&lt;/p>
&lt;h3 id="第四週練習">第四週練習&lt;/h3>
&lt;p>從原本 22 分鐘進步到 19 分，開始用段落切割，一邊放老師的影片一邊放自己的影片，找出為什麼自己會落後的地方&lt;/p>
&lt;p>老師的時間大概是&lt;/p>
&lt;ol>
&lt;li>(1:54) fifteen love&lt;/li>
&lt;li>(4:16) thirty love&lt;/li>
&lt;li>(8:00) love thirty&lt;/li>
&lt;li>(9:24) deuce&lt;/li>
&lt;li>(13:24) done&lt;/li>
&lt;/ol>
&lt;p>觀察後有幾個自己容易忘記的快捷鍵&lt;/p>
&lt;ol>
&lt;li>選取抽方法，可以用 z( / z{ 快速抽取，對比 vi( 快上一點&lt;/li>
&lt;li>刪除含單引號的變數&lt;/li>
&lt;/ol>
&lt;h2 id="工作上用得到嗎">工作上用得到嗎？&lt;/h2>
&lt;p>練習看起來很理想，但實務上有用嗎？&lt;br>
這也是在練習過程不斷思考的，雖然果斷也把工作機轉成 Webstrom + idealvim，新專案編寫自然沒太大問題，但是舊專案使用上就卡卡的，主要是以前的 js 寫法比較亂，ide 很難自動辨別，加上一個檔案程式碼上千行，花最多的時間不是在於修改而是&lt;code>查詢&lt;/code>，通常是使用 &lt;code>,m&lt;/code> 去看 file structure，接下來就是用滑鼠滾滾滾看 Code&lt;/p>
&lt;p>老師也有在上課提到，滑鼠也不是不好，在查詢時滑鼠滾動還是很方便，不用太拘泥&lt;/p>
&lt;p>總之目前工作使用上還沒有到很順，會少量用一些快捷鍵如抽方法 / 抽參數，但是還沒有辦法流暢的使用組合技&lt;/p></description></item><item><title>使用 Redis 當作 API Rate limit 的三種方法</title><link>https://yuanchieh.page/posts/2020/2020-10-18-%E4%BD%BF%E7%94%A8-redis-%E7%95%B6%E4%BD%9C-api-rate-limit-%E7%9A%84%E4%B8%89%E7%A8%AE%E6%96%B9%E6%B3%95/</link><pubDate>Sun, 18 Oct 2020 08:21:40 +0000</pubDate><guid>https://yuanchieh.page/posts/2020/2020-10-18-%E4%BD%BF%E7%94%A8-redis-%E7%95%B6%E4%BD%9C-api-rate-limit-%E7%9A%84%E4%B8%89%E7%A8%AE%E6%96%B9%E6%B3%95/</guid><description>&lt;p>最近公司 API 服務被 Client 不預期的高頻存取，造成後端 DB 很大的負擔，開始評估各種 API Rate Limit 的方案，其中一個最常見的作法就是靠 Redis，但具體的方案其實有蠻多種，參考以下影片整理三種作法&lt;/p>
&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/HnSb8DFU5UA"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>順便推薦一下 RedisLabs 所推出的 GUI 管理工具 &lt;code>RedisInsights&lt;/code>，可以快速分析 Redis 中 Key Space 的使用 / Profiling 一段時間內哪些 Key 被大量存取等等，基本的 Redis CLI 操作就更不用提了，對比之前用的 &lt;code>medis&lt;/code> 功能強化不少，尤其是&lt;code>管理/監控這一塊的功能&lt;/code>&lt;br>
目前是免費的，支援 Cluster Mode，連接 AWS ElasticCache 也沒問題，十分推薦&lt;/p>
&lt;h2 id="rate-limit-全觀">Rate Limit 全觀&lt;/h2>
&lt;p>要設計 Rate Limit 機制時需要考量幾個面向&lt;/p>
&lt;h3 id="who">Who&lt;/h3>
&lt;p>該如何識別要限制的對象？&lt;br>
最直覺是透過 IP，但是使用 IP 最大的風險是 如果是大客戶，他一個人的流量遠超過其他小客戶，對公司的價值顯然也是遠遠重要，如果用 IP 很容易有誤殺的情況，把有價值的用戶阻擋在外&lt;/p>
&lt;p>其他的作法可以用 JWT Token / API Key 等個別用戶識別的方式，需要針對自家的業務場景去判斷&lt;/p>
&lt;h3 id="how">How&lt;/h3>
&lt;p>該使用怎樣的方式計算限制的方式？&lt;br>
通常是在某個時間區段內，限制只能存取多少次的計算模式，有三種方式可以參考&lt;/p>
&lt;h3 id="static-time-window---固定時間區段">static time window - 固定時間區段&lt;/h3>
&lt;p>例如說每一分鐘為一個單位，這一分鐘內只能存取五次&lt;br>
這樣的方式十分簡單，但可能會有短時間內超量的問題，例如說 0:59 存取 4 次，接著 1:01 存取4 次，分開在兩個時間區段都是合法，但是才隔兩秒就存取 8 次，這可能不會是希望的結果&lt;/p>
&lt;p>實作方式，以目前每週 160 k 下載的 &lt;code>express-rate-limit&lt;/code> 中 redis 版本 &lt;a class="link" href="https://www.npmjs.com/package/rate-limit-redis" target="_blank" rel="noopener"
>rate-limit-redis&lt;/a> 是以下做法&lt;/p>
&lt;ol>
&lt;li>先計算出該時間段的鍵值，例如 01:00 ~ 01:59 的鍵值都是 &lt;code>01&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">expiryMs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">round&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1000&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">options&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">expiry&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>增加 key 並更新 ttl 時間，incr 會回傳當下增加後的值，藉此判斷是否超過限制&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">options&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">client&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">multi&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">incr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">rdskey&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">pttl&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">rdskey&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">exec&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>因為有 ttl，所以不用擔心 key 的刪除，這個方法簡單直覺儲存成本也很低&lt;/p>
&lt;p>為了嚴格限制&lt;code>任意時間區段內的最大存取數量&lt;/code>，參考以下文章提及兩種做法 &lt;a class="link" href="https://engineering.classdojo.com/blog/2015/02/06/rolling-rate-limiter/" target="_blank" rel="noopener"
>Better Rate Limiting With Redis Sorted Sets
&lt;/a>&lt;/p>
&lt;h3 id="token-bucket">token bucket&lt;/h3>
&lt;p>每一個用戶都有一個對應的 bucket，只有 token 足夠時可以進行操作，每隔一段時間會回補 token 數量，好處是可以制定多種操作的 token 需要數量，像是更繁雜的操作需要消耗更多的 token ，更有彈性應對不同的限制方案&lt;/p>
&lt;p>資料結構使用 Redis 的 &lt;code>Hash&lt;/code>，演算法大致如下&lt;/p>
&lt;ol>
&lt;li>用戶要操作的時候，如果此時沒有紀錄，先插入一筆 Hash &lt;code>user: 當下 的 timestamp =&amp;gt; token 初始化數量&lt;/code>&lt;/li>
&lt;li>後續操作時，取出上一次操作的 timestamp，接著回補這一段時間需要補充的 Token 數量&lt;/li>
&lt;li>接著扣除操作所需的 Token 數，查看是否有符合限制&lt;/li>
&lt;/ol>
&lt;p>需注意這種做法會有 &lt;code>Race Condition&lt;/code> 問題，如果一個用戶同時有兩個操作，在第三步驟檢查時，會誤以為自己都有足夠的 token，除非使用 &lt;code>Lua script&lt;/code>，Redis 才會將&lt;code>多個操作視為 atomic 避免 Race Condition&lt;/code>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/BitMEX/node-redis-token-bucket-ratelimiter" target="_blank" rel="noopener"
>node-redis-token-bucket-ratelimiter&lt;/a> 便是採用 Lua script 作法，讓我們來欣賞一下&lt;/p>
&lt;ol>
&lt;li>取得參數，並指定 &lt;code>redis.replicate_commands()&lt;/code>，這是在調用 &lt;code>$ redis eval&lt;/code> 時要產生隨機 IO 時需要提前執行的指令 &lt;a class="link" href="https://redis.io/commands/eval" target="_blank" rel="noopener"
>Redis - EVAL script numkeys key&lt;/a>，這一篇有易懂的解釋 &lt;a class="link" href="http://mysql.taobao.org/monthly/2019/01/06/" target="_blank" rel="noopener"
>Redis · 引擎特性 · Lua脚本新姿势&lt;/a>，基本上就是為了符合 Redis 在持久化以及副本資料時的功能，在 5.0 以後是默認選項； &lt;br>
接著就是分別計算上一次更新時間 &lt;code>initialUpdateMS&lt;/code> / 殘留的 token 數 &lt;code>prevTokens&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-lua" data-lang="lua">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- valueKey timestampKey | limit intervalMS nowMS [amount]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">local&lt;/span> &lt;span class="n">valueKey&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c1">-- &amp;#34;limit:1:V&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">local&lt;/span> &lt;span class="n">timestampKey&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c1">-- &amp;#34;limit:1:T&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">local&lt;/span> &lt;span class="n">limit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tonumber&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ARGV&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">local&lt;/span> &lt;span class="n">intervalMS&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tonumber&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ARGV&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">local&lt;/span> &lt;span class="n">amount&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">math.max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tonumber&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ARGV&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]),&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">local&lt;/span> &lt;span class="n">force&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ARGV&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;true&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">local&lt;/span> &lt;span class="n">lastUpdateMS&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">local&lt;/span> &lt;span class="n">prevTokens&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- Use effects replication, not script replication;; this allows us to call &amp;#39;TIME&amp;#39; which is non-deterministic&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">redis.replicate_commands&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">local&lt;/span> &lt;span class="n">time&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;TIME&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">local&lt;/span> &lt;span class="n">nowMS&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">math.floor&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">local&lt;/span> &lt;span class="n">initialTokens&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;GET&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">valueKey&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">local&lt;/span> &lt;span class="n">initialUpdateMS&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">if&lt;/span> &lt;span class="n">initialTokens&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">false&lt;/span> &lt;span class="kr">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">-- If we found no record, we temporarily rewind the clock to refill&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">-- via addTokens below&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">prevTokens&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lastUpdateMS&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">nowMS&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">intervalMS&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">prevTokens&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">initialTokens&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">initialUpdateMS&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;GET&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">timestampKey&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">initialUpdateMS&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kr">then&lt;/span> &lt;span class="c1">-- this is a corruption&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">-- 如果資料有問題，需要回推 lastUpdateMS 時間，也就是用現在時間回推殘存 Token 數量的回補時間&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lastUpdateMS&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">nowMS&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">prevTokens&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">limit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">intervalMS&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lastUpdateMS&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">initialUpdateMS&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>接著計算上一次到現在需要回補的 Token &lt;code>addTokens&lt;/code> / 這一次運算配額夠不夠 &lt;code>netTokens&lt;/code> / 如果下一次要嘗試需要等多久的時間 &lt;code>retryDelta&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-lua" data-lang="lua">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">local&lt;/span> &lt;span class="n">addTokens&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">math.max&lt;/span>&lt;span class="p">(((&lt;/span>&lt;span class="n">nowMS&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">lastUpdateMS&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">intervalMS&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">limit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- calculated token balance coming into this transaction&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">local&lt;/span> &lt;span class="n">grossTokens&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">math.min&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">prevTokens&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">addTokens&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">limit&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- token balance after trying this transaction&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">local&lt;/span> &lt;span class="n">netTokens&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">grossTokens&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">amount&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- time to fill enough to retry this amount&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">local&lt;/span> &lt;span class="n">retryDelta&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">local&lt;/span> &lt;span class="n">rejected&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">local&lt;/span> &lt;span class="n">forced&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">if&lt;/span> &lt;span class="n">netTokens&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="kr">then&lt;/span> &lt;span class="c1">-- we used more than we have&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">if&lt;/span> &lt;span class="n">force&lt;/span> &lt;span class="kr">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">forced&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">netTokens&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="c1">-- drain the swamp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">rejected&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">netTokens&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">grossTokens&lt;/span> &lt;span class="c1">-- rejection doesn&amp;#39;t eat tokens&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">-- == percentage of `intervalMS` required before you have `amount` tokens&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">retryDelta&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">math.ceil&lt;/span>&lt;span class="p">(((&lt;/span>&lt;span class="n">amount&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">netTokens&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">limit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">intervalMS&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">else&lt;/span> &lt;span class="c1">-- polite transaction&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">-- nextNet == pretend we did this again...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">local&lt;/span> &lt;span class="n">nextNet&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">netTokens&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">amount&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">if&lt;/span> &lt;span class="n">nextNet&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="kr">then&lt;/span> &lt;span class="c1">-- ...we would need to wait to repeat&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">-- == percentage of `invervalMS` required before you would have `amount` tokens again&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">retryDelta&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">math.ceil&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">math.abs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">nextNet&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">limit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">intervalMS&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>如果成功操作 ( rejected == false )，則延長 key 的過期時間&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-lua" data-lang="lua">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">if&lt;/span> &lt;span class="n">rejected&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">false&lt;/span> &lt;span class="kr">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;PSETEX&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">valueKey&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">intervalMS&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">netTokens&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">if&lt;/span> &lt;span class="n">addTokens&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="n">initialUpdateMS&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">false&lt;/span> &lt;span class="kr">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">-- we filled some tokens, so update our timestamp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;PSETEX&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">timestampKey&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">intervalMS&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">nowMS&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">-- we didn&amp;#39;t fill any tokens, so just renew the timestamp so it survives with the value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;PEXPIRE&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">timestampKey&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">intervalMS&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="sliding-time-window---滑動時間區段">sliding time window - 滑動時間區段&lt;/h3>
&lt;p>最後一個是使用 sorted set，可以使用 &lt;code>$ redis.multi&lt;/code> 將多個 sorted set 的指令串再一起 Atomic 執行所以能夠避免 Race Condition 狀況&lt;br>
具體想法是&lt;/p>
&lt;ol>
&lt;li>用一個 sorted set 儲存所有的 timestamp&lt;/li>
&lt;li>request 進來後，先用 &lt;code>ZREMRANGEBYSCORE&lt;/code> 捨棄 time window 以外的 key&lt;/li>
&lt;li>取得 sorted set 剩餘的所有元素 &lt;code>ZRANGE(0, -1)&lt;/code>&lt;/li>
&lt;li>加上這一次的操作 &lt;code>ZADD&lt;/code>，並延長 sorted set 的 ttl&lt;/li>
&lt;li>接著算整個 sorted set 的元素量，就知道存取幾次了&lt;/li>
&lt;/ol>
&lt;p>需要特別注意，這邊如果第五步判斷失敗也會被計算在 limit 當中，因為第四步已經先加上去了，如果&lt;code>在第三步先判斷數量夠不夠再去更新 sorted set，中間的時間差就有可能發生 Race Condition&lt;/code>，所以要嚴格限制必須要這麼做，除非又要包成 lua script&lt;/p>
&lt;p>這會導致一個風險，如果 Client 真的失控一直打，那他會無止盡的失敗，因為每一次的失敗操作都會被加入 sorted set 當中，但其實都沒有真的執行到&lt;/p>
&lt;p>模組請參考 &lt;a class="link" href="https://github.com/peterkhayes/rolling-rate-limiter" target="_blank" rel="noopener"
>rolling-rate-limiter&lt;/a>，程式碼在這&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">batch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">client&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">multi&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">batch&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">zremrangebyscore&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">clearBefore&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">addNewTimestamp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">batch&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">zadd&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">now&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nx">uuid&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">batch&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">zrange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;WITHSCORES&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">batch&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">expire&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ttl&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Promise&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">resolve&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">reject&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">batch&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">exec&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">result&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">reject&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 加完後才來計算是不是扣打足夠
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">zRangeOutput&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">addNewTimestamp&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nx">result&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="nx">result&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="nx">as&lt;/span> &lt;span class="nb">Array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">unknown&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">zRangeResult&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getZRangeResult&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">zRangeOutput&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">timestamps&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">extractTimestampsFromZRangeResult&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">zRangeResult&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">resolve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">timestamps&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="結論">結論&lt;/h2>
&lt;p>Rate Limit 看似簡單，但也有不少的眉角要去考量，之前一直都沒有客製 Redis 中 lua script 的部分，也是蠻有趣的&lt;/p></description></item><item><title>gRPC 介紹與 Nodejs 實作分享</title><link>https://yuanchieh.page/posts/2020/2020-06-07-grpc-%E4%BB%8B%E7%B4%B9%E8%88%87-nodejs-%E5%AF%A6%E4%BD%9C%E5%88%86%E4%BA%AB/</link><pubDate>Sun, 07 Jun 2020 08:21:40 +0000</pubDate><guid>https://yuanchieh.page/posts/2020/2020-06-07-grpc-%E4%BB%8B%E7%B4%B9%E8%88%87-nodejs-%E5%AF%A6%E4%BD%9C%E5%88%86%E4%BA%AB/</guid><description>&lt;p>一般的 API Endpoint 設計採用 RESTful API規範，不過 RESTful 比較指稱的是 Client/Server 的架構設計而不是侷限於 API Endpoint 的設計規範，更準確的說法是 HTTP + JSON 格式，佔據多數的 API 設計近一二十年 (SOAP/WSDL 因為工作中沒有使用過就不描述)&lt;/p>
&lt;p>但因應新的網路應用程式，不斷有新的設計嘗試去更進 API 設計，近年有 Facebook 提出了 &lt;code>GraphQL&lt;/code>，將讀取資料的彈性交還給 Client，適應多屏幕多裝置 Client 的應用場景&lt;/p>
&lt;p>又或是今天要探討的 &lt;code>gRPC&lt;/code>，由 Google 基於 http/2 提出且廣泛應用在微服務架構中，主要希望改善幾個問題&lt;/p>
&lt;ol>
&lt;li>&lt;strong>&lt;code>API 文件化與 Client 實作繁雜&lt;/code>&lt;/strong>&lt;br>
一般的 API 設計是 Server 開好 HTTP endpoint 後，定義好參數並撰寫文件，接著 Client 再閱讀文件實作；&lt;br>
好處是解耦的很徹底，不管有幾個 Client 或是使用什麼程式語言，按照 API 介面實作即可； &lt;br>
但同樣的要維護時相對成本也比較高，像是參數的名稱與型別，都必須雙方去維護與閱讀文件，再用程式碼實作，中間多了一層的轉換 &lt;br>
gRPC 預設採用 &lt;code>protocol buffer&lt;/code> 當作 IDL (介面定義語言)，將 Endpoint 提供的服務/參數/回傳值都定義好名稱與型別，&lt;code>當作 Server / Client 實作的 Interface&lt;/code>，大幅降低雙方溝通的成本&lt;/li>
&lt;li>&lt;strong>&lt;code>增加傳輸效率&lt;/code>&lt;/strong>&lt;br>
gRPC 預設使用 &lt;code>protocol buffer&lt;/code> 當作編碼/解碼傳輸內容，比用文字描述的 JSON 在檔案大小與網路傳輸效率上更具備優勢，專案中有提供 &lt;a class="link" href="https://github.com/david-cao/gRPCBenchmarks" target="_blank" rel="noopener"
>Android client benchmark&lt;/a>，gRPC 的延遲遠比 JSON 要快上許多&lt;/li>
&lt;li>&lt;strong>&lt;code>應用彈性&lt;/code>&lt;/strong> &lt;br>
傳統的 HTTP 就是 Request/Response 一來一往，在 grpc 中稱為 Unary Call，但是 gRPC 額外提供 &lt;code>streaming&lt;/code>，可以分批在同一個 request response 中傳送多次 payload，設計更有彈性的溝通方式&lt;/li>
&lt;li>&lt;strong>&lt;code>HTTP verb 並無法完整描述資源的操作&lt;/code>&lt;/strong> &lt;br>
之前設計 API 頭痛的是 HTTP 的動詞 (GET/POST) 等無法完整描述所有的操作，例如說批次刪除，後來&lt;a class="link" href="https://yuanchieh.page/post/2019-09-18_%E5%A6%82%E4%BD%95%E8%A8%AD%E8%A8%88-rest-api/" target="_blank" rel="noopener"
>參照 Google API 設計文件有找到解法&lt;/a>，但還是有這麼一點彆扭&lt;br>
採用 gRPC 就沒有這方面的規範(與困擾 ?!&lt;/li>
&lt;/ol>
&lt;p>目前 gRPC 由 Google 開源並主力維護，採用的大廠也有不少，也支援許多程式語言 Java/JS(Nodejs &amp;amp; browser)/Python/PHP 等等，Android/iOS App 也都有支援的 Library；&lt;br>
觀念上要找到映射於 HTTP 還蠻容易的，像是 Http header 對應 gRPC metadata / Http Status Code 對應 gRPC 也有同樣的回傳格式&lt;/p>
&lt;p>以下內容包含&lt;/p>
&lt;ol>
&lt;li>protocol buffer 簡介與編碼機制&lt;/li>
&lt;li>gPRC 四種傳輸方式介紹與 server 端實作&lt;/li>
&lt;li>錯誤處理與驗證機制 (&lt;code>*Warning 有坑&lt;/code>)&lt;/li>
&lt;/ol>
&lt;p>但目前不包含 Client side 實作&lt;/p>
&lt;h2 id="nodejs-實作">Nodejs 實作&lt;/h2>
&lt;p>以下會實作一個簡單的 To-Do List，demo code 於此 &lt;a class="link" href="https://github.com/sj82516/grpc-demo" target="_blank" rel="noopener"
>grpc-demo&lt;/a>&lt;/p>
&lt;h3 id="定義-proto-檔案">定義 .proto 檔案&lt;/h3>
&lt;p>在專案路徑下，建立一個資料夾 &lt;code>./protos&lt;/code> 放&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-protobuf" data-lang="protobuf">&lt;span class="line">&lt;span class="cl">&lt;span class="k">import&lt;/span> &lt;span class="s">&amp;#34;google/protobuf/empty.proto&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="n">syntax&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;proto3&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="kn">package&lt;/span> &lt;span class="nn">ToDoService&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="kd">message&lt;/span> &lt;span class="nc">ToDoItem&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">title&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">author&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="n">isDone&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">createDate&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="kd">message&lt;/span> &lt;span class="nc">ToDoList&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="k">repeated&lt;/span> &lt;span class="n">ToDoItem&lt;/span> &lt;span class="n">ToDoList&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="kd">message&lt;/span> &lt;span class="nc">GetQueryOptions&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">author&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="kd">service&lt;/span> &lt;span class="n">ToDoService&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="k">rpc&lt;/span> &lt;span class="n">CreateToDo&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ToDoItem&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">returns&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ToDoList&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="k">rpc&lt;/span> &lt;span class="n">createMultiToDo&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">stream&lt;/span> &lt;span class="n">ToDoItem&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">returns&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">google.protobuf.Empty&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="k">rpc&lt;/span> &lt;span class="n">GetToDoListByAuthor&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">GetQueryOptions&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">returns&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">stream&lt;/span> &lt;span class="n">ToDoItem&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="k">rpc&lt;/span> &lt;span class="n">GetToDoListByAuthorOnFly&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">stream&lt;/span> &lt;span class="n">GetQueryOptions&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">returns&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">stream&lt;/span> &lt;span class="n">ToDoItem&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol>
&lt;li>&lt;code>import&lt;/code>
可以從其他地方載入 proto 檔案使用裡面的宣告&lt;/li>
&lt;li>&lt;code>syntax = &amp;quot;proto3&amp;quot;;&lt;/code>&lt;br>
標註使用 protobuffer version&lt;/li>
&lt;li>&lt;code>message 宣告型別名稱 { 型別 參數名 = 順序}&lt;/code>&lt;br>
型別部分可以參考官網，有提供 int / uint / float / string 等多樣基礎型別，也可以使用自定義型別；&lt;br>
順序的部分，從 1 開始一路遞增，型別內部的參數順序不能重複，且&lt;code>越小的數字通常是越常使用到的參數&lt;/code>，詳見後續補充&lt;/li>
&lt;li>&lt;code>service 服務名稱 { rpc 函式名稱 (參數) returns (回傳值) }&lt;/code>&lt;br>
如果希望將 proto 用於 rpc，就需要宣告 service 類別，&lt;code>stream&lt;/code> 表示參數或回傳值可能會是批次傳送 payload&lt;br>
這邊定義了四個函式，建立 ToDoItem / streaming 批次建立 ToDoItem / 依照作者批次取得 ToDoItem / 動態改變搜尋作者並動態依照條件回傳 ToDoItem&lt;/li>
&lt;/ol>
&lt;h2 id="server-side-實作">Server side 實作&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;path&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">grpc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;grpc&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">protoLoader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;@grpc/proto-loader&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">toDoServiceImplementations&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./implementations/todoService&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">server&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">grpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Server&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">PROTO_PATH&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">path&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">__dirname&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;./protos/todo.proto&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">packageDefinition&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">protoLoader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">loadSync&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">PROTO_PATH&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">keepCase&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">longs&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">enums&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">defaults&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">oneofs&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">toDoProto&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">grpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">loadPackageDefinition&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">packageDefinition&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">ToDoService&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">server&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addService&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">toDoProto&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ToDoService&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">service&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">toDoServiceImplementations&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">server&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;0.0.0.0:50051&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">grpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ServerCredentials&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createInsecure&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">server&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">start&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">main&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>以上步驟大概是&lt;/p>
&lt;ol>
&lt;li>建立 grpc server instance&lt;/li>
&lt;li>載入上一步定義的 proto&lt;/li>
&lt;li>將 proto 與實作的 function 結合&lt;/li>
&lt;li>server bind port 並開始運行&lt;/li>
&lt;/ol>
&lt;p>接著看 implementation 部分&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;span class="lnt">83
&lt;/span>&lt;span class="lnt">84
&lt;/span>&lt;span class="lnt">85
&lt;/span>&lt;span class="lnt">86
&lt;/span>&lt;span class="lnt">87
&lt;/span>&lt;span class="lnt">88
&lt;/span>&lt;span class="lnt">89
&lt;/span>&lt;span class="lnt">90
&lt;/span>&lt;span class="lnt">91
&lt;/span>&lt;span class="lnt">92
&lt;/span>&lt;span class="lnt">93
&lt;/span>&lt;span class="lnt">94
&lt;/span>&lt;span class="lnt">95
&lt;/span>&lt;span class="lnt">96
&lt;/span>&lt;span class="lnt">97
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">grpc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;grpc&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">todoList&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="nx">title&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Hello&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">author&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Hello2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">isDone&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">createDate&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mf">1.4&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="nx">title&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Hello2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">author&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Hello&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">isDone&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">createDate&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mf">1.4&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="nx">title&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Hello3&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">author&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Hello&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">isDone&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">createDate&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mf">1.4&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="nx">title&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;world&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">author&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;world&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">isDone&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">createDate&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mf">1.4&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="nx">title&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;world2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">author&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Hello&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">isDone&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">createDate&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mf">1.4&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="nx">title&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;world3&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">author&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Hello2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">isDone&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">createDate&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;1.4&amp;#34;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">CreateToDo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">call&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">callback&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">clientToken&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">call&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">metadata&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;token&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">.[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">clientToken&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="s1">&amp;#39;Secret&amp;#39;&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">callback&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">error&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">grpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">status&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PERMISSION_DENIED&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">message&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;No token&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">todoList&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">call&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">request&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">todoList&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">callback&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">error&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">grpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">status&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">OUT_OF_RANGE&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">message&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;too many ToDoItem&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">callback&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ToDoList&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">todoList&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">createMultiToDo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">call&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">callback&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">call&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;data&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">todoList&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">call&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;end&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">callback&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">GetToDoListByAuthor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">call&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">author&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">call&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">author&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">isAny&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">todoItem&lt;/span> &lt;span class="k">of&lt;/span> &lt;span class="nx">todoList&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">author&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="nx">todoItem&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">author&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">isAny&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">call&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">todoItem&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">await&lt;/span> &lt;span class="nx">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">isAny&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">call&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">emit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;error&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">grpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">status&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PERMISSION_DENIED&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">call&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">end&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">GetToDoListByAuthorOnFly&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">call&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">author&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">call&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;data&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">author&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">author&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">main&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">call&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;end&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">call&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">end&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">todoItem&lt;/span> &lt;span class="k">of&lt;/span> &lt;span class="nx">todoList&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">author&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="nx">todoItem&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">author&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">call&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">todoItem&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">await&lt;/span> &lt;span class="nx">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sec&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Promise&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">res&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">setTimeout&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="nx">sec&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">exports&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">CreateToDo&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">createMultiToDo&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">GetToDoListByAuthor&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">GetToDoListByAuthorOnFly&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到 handle function 共有四種&lt;/p>
&lt;ol>
&lt;li>handleUnaryCall(call, callback) // CreateToDo&lt;/li>
&lt;li>handleClientStreamingCall(call, callback) // createMultiToDo&lt;/li>
&lt;li>handleServerStreamingCall(call) // GetToDoListByAuthor&lt;/li>
&lt;li>handleBidiStreamingCall(call) // GetToDoListByAuthorOnFly&lt;/li>
&lt;/ol>
&lt;p>拆成 client / server 兩部分&lt;/p>
&lt;ol>
&lt;li>如果 client 是送 unary data，則直接從 &lt;code>call.request&lt;/code> 讀取傳送值&lt;/li>
&lt;li>如果 client 是送 streaming data，則使用 &lt;code>call.on('data', (data)=&amp;gt;{})&lt;/code> / &lt;code>call.on('end', ()=&amp;gt;{})&lt;/code> 處理資料與傳送結束&lt;/li>
&lt;li>如果 server 是送 unary data，則handle function 第二個參數為 callback，callback 常用前兩個參數，代表 &lt;code>error&lt;/code> 跟 &lt;code>data&lt;/code>，如果沒有錯誤則回傳 &lt;code>callback(null, myData)&lt;/code>&lt;/li>
&lt;li>如果 server 是送 streaming data，則用 &lt;code>call.write(myData)&lt;/code>，結束傳送呼叫 &lt;code>call.end()&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>搭配的 GUI Client 工具可以參考 &lt;a class="link" href="https://github.com/uw-labs/bloomrpc" target="_blank" rel="noopener"
>bloomrpc&lt;/a>，載入 proto 檔案後就會自動跳出定義的 service 與預期的回傳結果，相當的方便，這也是使用 gRPC 的一大好處&lt;/p>
&lt;h3 id="傳入多餘的參數或型別錯誤">傳入多餘的參數或型別錯誤&lt;/h3>
&lt;p>在使用預先型別定義的設計時，不免腦中浮現如果我不按照定義的話會怎麼樣？&lt;br>
如果是&lt;code>傳入多餘的型別，protobuffer 在 version 2 &amp;amp;&amp;amp; version 3.5 以上會保留&lt;/code>，目前版本到 3.12 了&lt;br>
如果是 &lt;code>型別不對&lt;/code>，內部採用的 encode / decode 是基於 &lt;a class="link" href="https://www.npmjs.com/package/protobufjs#valid-message" target="_blank" rel="noopener"
>protobufjs&lt;/a>，會使用 Number / Boolean 等 JS 類別來轉換型別，例如 number &amp;ldquo;123&amp;rdquo; 就會變成 123&lt;/p>
&lt;h2 id="錯誤處理">錯誤處理&lt;/h2>
&lt;p>根據前面所描述，Server 回應時會分成 Unary 跟 Streaming，兩種的錯誤回傳機制不同；&lt;br>
這部分有點小坑，官方範例只有示範 Unary Response 時的錯誤處理，也就是呼叫 callback 的第一個參數&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">callback&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">error&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">grpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">status&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">OUT_OF_RANGE&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">message&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;too many ToDoItem&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>先前定義 service 時並沒有宣告錯誤回傳，這是因為 gRPC 內建錯誤訊息，格式如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> string error
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> string message
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>error 對應於 HTTP status code，可以從 grpc 的靜態參數取得如 &lt;code>grpc.status.PERMISSION_DENIED&lt;/code> 等同於 403，message 則是自定義的字串，需注意 Nodejs 不支援 rich format，以下截自官方文件&lt;/p>
&lt;blockquote>
&lt;p>This richer error model is already supported in the C++, Go, Java, Python, and Ruby libraries, and at least the grpc-web and Node.js libraries have open issues requesting it.&lt;/p>
&lt;/blockquote>
&lt;p>所以 gRPC client 收到的錯誤訊息會被轉成&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;error&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;2 UNKNOWN: too many ToDoItem&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>另外 Streaming response 傳遞錯誤的方式是&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">call&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">emit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;error&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">grpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">status&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PERMISSION_DENIED&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>emit error 後會自動 close，目前只支援 status，不能傳遞物件，否則 connection 無法被 close，呼叫 &lt;code>call.end()&lt;/code> 也沒有用&lt;/p>
&lt;/blockquote>
&lt;p>如果要有更豐富的錯誤格式，就需要自己定義了&lt;/p>
&lt;h2 id="驗證機制">驗證機制&lt;/h2>
&lt;p>gRPC 內建兩種驗證相關的機制，一種是 &lt;code>SSL/TLS&lt;/code>，提供通訊上的點到點加密，另一種是 Google 服務的 OAuth Token 驗證機制，後者僅限於與 Google 服務對接才有用；&lt;br>
當然也可以用 middleware 方式自行實作驗證機制&lt;/p>
&lt;p>驗證機制有兩種 scope，一種是 &lt;code>Channel Level&lt;/code>，也就是適用於 gRPC 連線，另一個是 &lt;code>Call Level&lt;/code>，也就是每次呼叫，這部分是使用於 Client side&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">ssl_creds&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">grpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">credentials&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createSsl&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">root_certs&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">stub&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">helloworld&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Greeter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;myservice.example.com&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ssl_creds&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>這邊為了實作方便性，將 token 放置於 &lt;code>metadata&lt;/code> 之中，要從 server side 讀取使用 &lt;code>call.metadata.get('Key')&lt;/code> 即可&lt;/p>
&lt;h2 id="cache">Cache？&lt;/h2>
&lt;p>另一個 HTTP (RESTful 架構下) 原有的設計是 Cache 機制，又分成 server / proxy / client 三者處理，gRPC 看起來有類似的規劃，但目前還在實驗階段 &lt;a class="link" href="https://github.com/grpc/grpc/issues/7945" target="_blank" rel="noopener"
>Provide support for caching GRPC method response #7945&lt;/a>&lt;/p>
&lt;h2 id="protocol-buffer-encoding-機制">Protocol buffer Encoding 機制&lt;/h2>
&lt;p>參考官方文件 &lt;a class="link" href="https://developers.google.com/protocol-buffers/docs/encoding" target="_blank" rel="noopener"
>Protocol buffer Encoding&lt;/a>，先前提到 Protocol buffer 會將訊息編碼成 binary 格式，而 JSON 則維持文字格式，這邊簡單介紹 Protocol buffer 編碼的過程&lt;/p>
&lt;h4 id="varints">Varints&lt;/h4>
&lt;p>varints 是一種用多個 bytes 表達數字的方式，除了最後一個 byte 外，其餘 byte 的第一位元表示後續是否還有 byte，byte 的順序為最低有效位(越前面的 byte 是低位) &lt;code>least significant group first.&lt;/code>，所以實際上每個 byte 是用 7 bits 表達數值&lt;/p>
&lt;p>例如說 &lt;code>1010 1100 0000 0010&lt;/code> 代表 300，因為 &lt;code>1 010 1100&lt;/code> 1 代表後面還有 byte 相連，&lt;code>0 000 0010&lt;/code> 0 則表示他是最後一個 byte 了；&lt;br>
因為最低有效位，所以重組成 &lt;code>000 0010 010 1100&lt;/code>，也就是 300&lt;/p>
&lt;h4 id="key-value">Key Value&lt;/h4>
&lt;p>其實 Protocol buffer 就是編碼一連串的 Key-Value，在編碼時會以 &lt;code>編碼號(5 bits) 類別(3 bits) 數值&lt;/code>表示，例如說&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">message Test2 &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> optional string &lt;span class="nv">b&lt;/span> &lt;span class="o">=&lt;/span> 2&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>假設 b 儲存了 &amp;ldquo;testing&amp;rdquo;，那時記得編碼結果是 &lt;code>12 07 74 65 73 74 69 6e 67&lt;/code>，拆解 12 成 &lt;code>0001 0010&lt;/code> =&amp;gt; &lt;code>00010 010&lt;/code> 對應到欄位編號 2 + 數值類別 2(代表是自訂長度的類別，如 string / object 等)；&lt;br>
接著 &lt;code>07&lt;/code> 表示接下來 7 個 bytes 是數值表示；&lt;br>
後續的數值是 utf-8 編碼的顯示&lt;/p>
&lt;p>接著看&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">message Test1 &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> optional int32 &lt;span class="nv">a&lt;/span> &lt;span class="o">=&lt;/span> 1&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">message Test3 &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> optional Test1 &lt;span class="nv">c&lt;/span> &lt;span class="o">=&lt;/span> 3&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>假設 Test1 a 儲存 150，則編碼結果hex 表示為 &lt;code>08 96 01&lt;/code>，也就是 &lt;code>00001 000&lt;/code> 欄位編號 1 + 數值編號 0 也就是 varints；&lt;br>
&lt;code>96 01&lt;/code> 則是 &lt;code>1001 0110 + 0000 0001&lt;/code> 並依照 varints 表示法轉乘 &lt;code>000 0001 001 0110&lt;/code> 也就是 150&lt;/p>
&lt;p>接著 Test3 儲存 Test1，假設 Test1 的 a 等於 150；&lt;br>
hex 表示法為 &lt;code> 1a 03 08 96 01&lt;/code>，也就是 &lt;code>00011 010&lt;/code>，欄位 3的類別是 2，接下來 &lt;code>03&lt;/code> 共 3 個bytes 為數值，也就是上一步的 &lt;code>08 96 01&lt;/code>&lt;/p>
&lt;h2 id="總結">總結&lt;/h2>
&lt;p>gRPC 會全面取代 HTTP + JSON 嗎？ &lt;br>
這個問題或許有點像 Deno 會不會全面取代 Nodejs，現在談好像有點過早，畢竟 HTTP + JSON 行之有年，多方平台的支援度還是比較好，包含像 Proxy 等中介網路服務&lt;/p>
&lt;p>但是 gRPC 在某些用途上，基於開發效率 / 傳輸速率等，確實很值得投資與嘗試的技術&lt;/p></description></item><item><title>JS Proxy / Reflect 實戰 - 實作 API 自動 retry 機制</title><link>https://yuanchieh.page/posts/2020/2020-05-27-js-proxy-/-reflect-%E5%AF%A6%E6%88%B0-%E5%AF%A6%E4%BD%9C-api-%E8%87%AA%E5%8B%95-retry-%E6%A9%9F%E5%88%B6/</link><pubDate>Wed, 27 May 2020 08:21:40 +0000</pubDate><guid>https://yuanchieh.page/posts/2020/2020-05-27-js-proxy-/-reflect-%E5%AF%A6%E6%88%B0-%E5%AF%A6%E4%BD%9C-api-%E8%87%AA%E5%8B%95-retry-%E6%A9%9F%E5%88%B6/</guid><description>&lt;p>之前在閱讀 ES6 相關教學時，有提及 &lt;code>Proxy&lt;/code> / &lt;code>Reflect&lt;/code> 這兩個新的內建物件型別，Proxy 主要是作為指定物件的代理，可以改寫、偵聽物件的存取與操作 / Reflect 則是用靜態方法操作物件，完善 Proxy handler 的實作；&lt;br>
當初有看沒有懂，也想不到應用的場景，直到最近在開發應用程式時，遇到要包裝 API 自動 retry 機制&lt;/p>
&lt;blockquote>
&lt;p>針對不同的 API 錯誤集中化處理，可能是單純 retry 或是呼叫其他 API 換新的 token 之類的&lt;/p>
&lt;/blockquote>
&lt;p>如果要每次 api call 時去 catch error 並處理是一件非常頭疼且難以管理的事情，臨機一動想到 &lt;code>Proxy&lt;/code> 這個好幫手，目前用起來蠻順利的，以下分享 Proxy / Reflect 基本介紹，以及如何應用在 API retry 機制的實作&lt;/p>
&lt;p>文章內容大多參考自 &lt;a class="link" href="https://javascript.info/proxy" target="_blank" rel="noopener"
>javascript.info: Proxy and Reflect&lt;/a>，個人覺得寫得比 MDN 詳盡且易懂&lt;/p>
&lt;h2 id="proxy">Proxy&lt;/h2>
&lt;p>當我們在調用 Proxy 時，會這樣宣告&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Proxy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">target&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">handler&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol>
&lt;li>&lt;code>target&lt;/code>&lt;br>
要被 Proxy 代理的物件對象，只要是 Object 型態都可以，包含 Array / Function 等，如果不是 Object 宣告時會收到錯誤&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">Uncaught&lt;/span> &lt;span class="nx">TypeError&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Cannot&lt;/span> &lt;span class="nx">create&lt;/span> &lt;span class="nx">proxy&lt;/span> &lt;span class="kd">with&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="nx">non&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">object&lt;/span> &lt;span class="nx">as&lt;/span> &lt;span class="nx">target&lt;/span> &lt;span class="nx">or&lt;/span> &lt;span class="nx">handler&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>&lt;code>handler&lt;/code>&lt;br>
選擇要指定觸發的時機，Proxy 會產生所謂的 &lt;code>trap&lt;/code>，也就是攔截物件操作的方法，如果未定義則直接呼叫原 Target&lt;/li>
&lt;/ol>
&lt;p>在物件的操作上，都會有對應的內部呼叫方法(internal methods)，例如說 &lt;code>new A()&lt;/code> 代表呼叫了 &lt;code>A 物件的 [[Contructor]]&lt;/code> 方法，常用的 get / set 如 &lt;code>a.prop / a.prop = 'hello world'&lt;/code> 則分別呼叫了 &lt;code>[[Get]] / [[Set]]&lt;/code> 等方法，而 handler 則是對應這些方法產生攔截的定義&lt;/p>
&lt;p>另外有些物件會有內部的儲存資料格式，稱為 internal slot，例如 Map 的內部資料格式是 &lt;code>[[Mapdata]]&lt;/code> 而不是透過 &lt;code>[[Get]]/[[Set]]&lt;/code>，這類型就不能透過 Proxy 代理&lt;/p>
&lt;h4 id="基本案例---改寫-get-設定預設值">基本案例 - 改寫 get 設定預設值&lt;/h4>
&lt;p>我們希望在取得陣列時，遇到超出範圍則回傳預設值 0&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">numbers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">numbers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Proxy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">numbers&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">target&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">prop&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">receiver&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">prop&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">prop&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// default value
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="c1">// 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="c1">// 0
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在 handler 中定義 get 可以攔截 &lt;code>[[Get]]&lt;/code> 呼叫，會收到三個參數 target / prop / receiver&lt;/p>
&lt;ol>
&lt;li>target &lt;br>
目標物件，也就是 number 本身&lt;/li>
&lt;li>prop&lt;br>
呼叫的屬性名稱&lt;/li>
&lt;li>receiver:&lt;br>
&lt;code>執行 target[prop]&lt;/code> 時的 this 代表值，通常是 Proxy 本身，但如果是有繼承等實作會不太一樣，後續會補充&lt;/li>
&lt;/ol>
&lt;p>另外方法呼叫也會觸發 get喔，例如 a.method()&lt;/p>
&lt;h4 id="第二個案例---改寫-set-統一驗證方式">第二個案例 - 改寫 set 統一驗證方式&lt;/h4>
&lt;p>在寫入表單時，可能會用一個物件暫存用戶的輸入，但此時都需要欄位的驗證，例如手機號碼 / 地址格式等等&lt;br>
如果要將邏輯散落在每一個輸入後的 function 有點麻煩&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">numbers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">numbers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Proxy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">numbers&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// (*)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">target&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">prop&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">val&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">receiver&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// to intercept property writing
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">typeof&lt;/span> &lt;span class="nx">val&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;number&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">target&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">prop&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">val&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">numbers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// added successfully
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">numbers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// added successfully
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">alert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Length is: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">numbers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">numbers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;test&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// TypeError (&amp;#39;set&amp;#39; on proxy returned false)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>set 會收到四個參數，並注意需要回傳 &lt;code>boolean&lt;/code> 表示 set 是否成功&lt;/p>
&lt;/blockquote>
&lt;p>其餘像是 construct / getPrototypeOf / ownKeys 等等的方法&lt;/p>
&lt;h4 id="實際使用---正式環境複寫-console-行為">實際使用 - 正式環境複寫 console 行為&lt;/h4>
&lt;p>在開發時，為了 debug 方便回留下很多 console 呼叫的方法，但如果上到正式機忘記關閉就會很尷尬；&lt;br>
同時像 error / warning 會需要用其他的方式送回 server 紀錄錯誤 log，避免正式機除錯不易，此時用 Proxy 去包 console 就是一個蠻方便的做法&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">window&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">console&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Proxy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">window&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">get&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">target&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">prop&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">receive&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">prop&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;log&amp;#39;&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nx">prop&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;debug&amp;#39;&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">alert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;你看不見我&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">()=&amp;gt;{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">prop&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// 彈出 alert
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;123&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 照常顯示
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>當然也可以自定義 Log Class 達到一樣的效果，但會覺得用 console.log 是個很直覺的做法，如果能用 Proxy 去改寫達到一樣的效果比較方便 (懶&lt;/p>
&lt;h4 id="receiver-應用">receiver 應用&lt;/h4>
&lt;p>剛才提到 get 第三個參數 receiver 指的是函式執行 this 所代表的物件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">user&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Guest&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">get&lt;/span> &lt;span class="nx">name&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">userProxy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Proxy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">target&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">prop&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">receiver&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">prop&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="nx">Symbol&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">iterator&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nx">prop&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="nx">Symbol&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toStringTag&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nx">prop&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="nx">Symbol&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;nodejs.util.inspect.custom&amp;#39;&lt;/span>&lt;span class="p">)){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">target&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">prop&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">receiver&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">prop&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="c1">// (*) target = user
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">admin&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">__proto__&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">userProxy&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Admin&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">userProxy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// outputs: Guest
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">admin&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="c1">// Expected: Admin but outputs: Guest (?!?)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>宣告一個 user 物件，並用 userProxy 代理，最後 admin 用 &lt;code>__proto__&lt;/code> 方式繼承 userProxy，透過 userProxy get 可以看出 &lt;code>target 都指向 user&lt;/code>，但是 receiver 就不一樣，兩者都指向呼叫的自身 (Proxy / Admin)&lt;br>
但因為最後執行是透過 &lt;code>target[prop]&lt;/code>，所以 this 指向的都是 user&lt;/p>
&lt;p>如果希望 admin.name 最後印出 &amp;ldquo;Admin&amp;rdquo;，也就是需要讓執行時 this 指向 admin，就需要 Reflect 協助&lt;/p>
&lt;blockquote>
&lt;p>記得要避免在 proxy handler get 中直接呼叫 receiver[prop]，因為會不斷透過 [[GET]] -&amp;gt; Proxy get -&amp;gt; [[GET]] -&amp;gt; Proxy get 輪迴&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>這一段是用 node.js 執行，需加入 if condition 避免不斷的遞迴呼叫，因為在 console.log 時會主動去 iterate 物件並呼叫 toString，這些也會觸發 [[GET]]&lt;/p>
&lt;/blockquote>
&lt;h2 id="reflect">Reflect&lt;/h2>
&lt;p>Reflect 是 ES6 新增的類別，不能透過 new 建構新的 instance，只能呼叫靜態方法，主要是針對物件操作的方法，例如&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">b&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">123&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">b&lt;/span> &lt;span class="c1">// 123
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">Reflect&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;b&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 123
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">object1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">property1&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">42&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">delete&lt;/span> &lt;span class="nx">object1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">property1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">Reflect&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">deleteProperty&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">object1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;property1&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>基本上都有一對一的方法可以調用&lt;/p>
&lt;p>剛才提到，getter 時第三個參數 receiver 可以變成 target 呼叫時的 this 指向，例如&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">123&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">get&lt;/span> &lt;span class="nx">d&lt;/span>&lt;span class="p">(){&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">456&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">Reflect&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;d&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 123
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">Reflect&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 456
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>所以當我們希望指定 getter 實際操作的物件，可以用 &lt;code>Reflect.get 去取代 target[propd]&lt;/code>，這是一種最安全的做法，結合 function call 用以下方式最為保險&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="k">new&lt;/span> &lt;span class="nb">Proxy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">target&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">prop&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">receiver&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">Reflect&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(...&lt;/span>&lt;span class="nx">arguments&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">typeof&lt;/span> &lt;span class="nx">value&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;function&amp;#39;&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nx">value&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">target&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="nx">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在某些時候，用 Reflect.get 可以避免不預期錯誤，例如說 &lt;code>Map&lt;/code>，Map 在讀寫參數時是透過 &lt;code>this.[[MapData]]&lt;/code> 而不是 &lt;code>this.[[Get]]/this.[[Set]]&lt;/code>，所以如果沒有指定 receiver 則預設 this 指向 Proxy 就會拋出錯誤，要改用 Reflect.get 將 this 替換成 Map 本身才不會有問題&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">map&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Map&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">proxy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Proxy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">proxy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;test&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 錯誤: Uncaught TypeError: Method Map.prototype.get called on incompatible receiver
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">/// 正確方法
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">map&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Map&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">proxy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Proxy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">target&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">prop&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">receiver&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">Reflect&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(...&lt;/span>&lt;span class="nx">arguments&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">typeof&lt;/span> &lt;span class="nx">value&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;function&amp;#39;&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nx">value&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">target&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="nx">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">proxy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;test&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="api-retry-機制">API retry 機制&lt;/h4>
&lt;p>個人還是蠻喜歡用 axios 的而不是用原生的 fetch，可能是因為 axios 更像一個物件，可以透過 create 創建 instance 蠻方便的&lt;/p>
&lt;p>接著用 Proxy 代理 function 的呼叫，並回傳一個 async function，在裡頭就能自定義錯誤處理機制，例如說收到 403 就去換新的 token 之類的&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">APIInstace&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">axios&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">create&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">baseURL&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;https://httpstat.us&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">APIProxy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Proxy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">APIInstace&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">target&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">prop&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">receiver&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">fn&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">Reflect&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(...&lt;/span>&lt;span class="nx">arguments&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">fn&lt;/span>&lt;span class="p">(...&lt;/span>&lt;span class="nx">arguments&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>&lt;span class="k">catch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">status&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="mi">403&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">APIInstace&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;https://www.mocky.io/v2/5ed11b963500005b00ffa29a&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="s2">&amp;#34;OhNo&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">await&lt;/span> &lt;span class="nx">APIProxy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;/403&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// 沒有錯誤
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">await&lt;/span> &lt;span class="nx">APIProxy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;/404&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 拋出 OhNo 錯誤
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Expressjs Middleware 如何在 Response 結束觸發</title><link>https://yuanchieh.page/posts/2020/2020-02-06-expressjs-middleware-%E5%A6%82%E4%BD%95%E5%9C%A8-response-%E7%B5%90%E6%9D%9F%E8%A7%B8%E7%99%BC/</link><pubDate>Thu, 06 Feb 2020 22:21:40 +0000</pubDate><guid>https://yuanchieh.page/posts/2020/2020-02-06-expressjs-middleware-%E5%A6%82%E4%BD%95%E5%9C%A8-response-%E7%B5%90%E6%9D%9F%E8%A7%B8%E7%99%BC/</guid><description>&lt;p>在使用 express.js 當作 Nodejs server 框架時，時常會需要寫一些 Middleware 處理 Token 驗證、用戶權限檢查等等，也會套用很多第三方的模組去建構程式&lt;br>
但突然某天在思考&lt;code>如何自己寫一個紀錄response time&lt;/code>的 Middleware，發現自己沒辦法用一個 Middleware 註冊就完成這件事，因為 express.js 不像是 Koa 的 middleware 是用 promise based 實作，所以當某個環節是非同步，執行的順序就會錯亂&lt;/p>
&lt;p>後來查看了 &lt;code>morgan&lt;/code> 被大量使用的 express log middleware，才發現其中設計的小巧思，以下是整理的內容&lt;/p>
&lt;h2 id="expressjs-middleware-設計">Expressjs Middleware 設計&lt;/h2>
&lt;p>先來看最基本的 Middleware 設計&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">express&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;express&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">app&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">express&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">use&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">next&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;middleware 1 start&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">next&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;middleware 1 end&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">use&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">next&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;middleware 2 start&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">next&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;middleware 2 end&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;/&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;request started&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">await&lt;/span> &lt;span class="nx">delay&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;request finished&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">send&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">delay&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Promise&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">res&lt;/span>&lt;span class="p">)=&amp;gt;{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">setTimeout&lt;/span>&lt;span class="p">(()=&amp;gt;{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">res&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3000&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>目前的 log 會變成&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-md" data-lang="md">&lt;span class="line">&lt;span class="cl">middleware 1 start
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">middleware 2 start
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">request started
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">middleware 2 end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">middleware 1 end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">request finished
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果我們希望在 Request 進來先紀錄開始時間，接著在 Response 結束時紀錄結束時間，就必須仰賴其他的實作方式&lt;/p>
&lt;h2 id="on-headers--on-finished">on-headers / on-finished&lt;/h2>
&lt;p>爬過 &lt;code>morgan&lt;/code> 程式碼後，發現是透過這兩個模組去實作功能的&lt;br>
&lt;a class="link" href="https://github.com/jshttp/on-headers" target="_blank" rel="noopener"
>on-headers&lt;/a>：註冊事件，當 header 被寫入時會觸發&lt;br>
&lt;a class="link" href="https://github.com/jshttp/on-finished" target="_blank" rel="noopener"
>on-finished&lt;/a>：註冊事件，當 request/response 結束時觸發&lt;br>
這兩個模組可以針對 Nodejs 原生的 http server 搭配使用，express.js 也是繼承原生的 http server&lt;/p>
&lt;p>在 &lt;code>morgan&lt;/code> module 中，在 middleware 進入一開始標記 request 開始時間，在 on-headers 時紀錄 request 結束時間，在 on-finished 將訊息印出，pseudo code 大致如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">use&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">next&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_startTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">getTime&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">onHeader&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">res&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_endTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">getTime&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">onFinished&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">res&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`req process time: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_endTime&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_startTime&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb"> ms`&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">next&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>log 結果是&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-md" data-lang="md">&lt;span class="line">&lt;span class="cl">request started
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">request finished
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">req process time: 1010 ms
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="on-headers-實作">on-headers 實作&lt;/h3>
&lt;p>將原本的 response 中的 writeHead 複寫，只是多包一層觸發事件的機制&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">createWriteHead&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">prevWriteHead&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">listener&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">fired&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// return function with core name and argument list
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">writeHead&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">statusCode&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// set headers from arguments
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">args&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">setWriteHeadHeaders&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">apply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">arguments&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// fire listener
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nx">fired&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fired&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">listener&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">....&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">prevWriteHead&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">apply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">args&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">onHeaders&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">res&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">listener&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nx">res&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">TypeError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;argument res is required&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">typeof&lt;/span> &lt;span class="nx">listener&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="s1">&amp;#39;function&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">TypeError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;argument listener must be a function&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">writeHead&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">createWriteHead&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">writeHead&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">listener&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="on-finished-實作">on-finished 實作&lt;/h3>
&lt;p>這邊的實作就比較有趣，如何正確的判讀 http request/response 結束了呢？&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">isFinished&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">msg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">socket&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">msg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">socket&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">typeof&lt;/span> &lt;span class="nx">msg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">finished&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;boolean&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// OutgoingMessage
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nb">Boolean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">msg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">finished&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">socket&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">writable&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">typeof&lt;/span> &lt;span class="nx">msg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">complete&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;boolean&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// IncomingMessage
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nb">Boolean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">msg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">upgrade&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="nx">socket&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">readable&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">msg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">complete&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="nx">msg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">readable&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// don&amp;#39;t know
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">undefined&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果是套用在 response，需注意根據官方文件 &lt;a class="link" href="https://nodejs.org/api/http.html#http_request_finished" target="_blank" rel="noopener"
>response.finished&lt;/a> 是指說 &lt;code>res.end()&lt;/code> 被呼叫後設定為 true，不代表 response 中的資料完全傳輸到網路上&lt;/p>
&lt;p>這些討論可以看 PR &lt;a class="link" href="https://github.com/jshttp/on-finished/pull/31" target="_blank" rel="noopener"
>response is only finished if socket is detached #31&lt;/a>，提交者修改成&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">stream&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="k">typeof&lt;/span> &lt;span class="nx">stream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">closed&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;boolean&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Http2ServerRequest
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// Http2ServerResponse
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">stream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">closed&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">typeof&lt;/span> &lt;span class="nx">msg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">finished&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;boolean&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// OutgoingMessage
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">msg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">finished&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">msg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">outputSize&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nx">socket&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">writableLength&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">socket&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">writable&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>增加 http2 的檢查，以及確保 &lt;code>outputSize === 0&lt;/code> 所有 queued 住的資料都確實送出 socket&lt;/p>
&lt;p>知道如何判斷 response 是否結束，最後看事件的註冊&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">attachFinishedListener&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">msg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">callback&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">eeMsg&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">eeSocket&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">finished&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">function&lt;/span> &lt;span class="nx">onFinish&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">eeMsg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">cancel&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">eeSocket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">cancel&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">finished&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">callback&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// finished on first message event
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">eeMsg&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">eeSocket&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">first&lt;/span>&lt;span class="p">([[&lt;/span>&lt;span class="nx">msg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;end&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;finish&amp;#39;&lt;/span>&lt;span class="p">]],&lt;/span> &lt;span class="nx">onFinish&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">function&lt;/span> &lt;span class="nx">onSocket&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">socket&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// remove listener
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">msg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">removeListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;socket&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">onSocket&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">....&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">eeSocket&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">first&lt;/span>&lt;span class="p">([[&lt;/span>&lt;span class="nx">socket&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;error&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;close&amp;#39;&lt;/span>&lt;span class="p">]],&lt;/span> &lt;span class="nx">onFinish&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">msg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">socket&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// socket already assigned
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">onSocket&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">msg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">socket&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// wait for socket to be assigned
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">msg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;socket&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">onSocket&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">....&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在 response 與 response.socket 分別註冊事件，當結束或錯誤事件觸發後，檢查 response 是否真的結束，最後觸發用戶註冊的事件&lt;/p></description></item><item><title>Webassembly 教學 - 基本運算、陣列處理與指針</title><link>https://yuanchieh.page/posts/2020/2020-01-01-webassembly-%E6%95%99%E5%AD%B8-%E5%9F%BA%E6%9C%AC%E9%81%8B%E7%AE%97%E9%99%A3%E5%88%97%E8%99%95%E7%90%86%E8%88%87%E6%8C%87%E9%87%9D/</link><pubDate>Wed, 01 Jan 2020 05:21:40 +0000</pubDate><guid>https://yuanchieh.page/posts/2020/2020-01-01-webassembly-%E6%95%99%E5%AD%B8-%E5%9F%BA%E6%9C%AC%E9%81%8B%E7%AE%97%E9%99%A3%E5%88%97%E8%99%95%E7%90%86%E8%88%87%E6%8C%87%E9%87%9D/</guid><description>&lt;p>近日因為公司專案，要把之前寫好處理圖片的 C++ code 搬移至網頁上，趁機會探索 Web Assembly，未來可以持續移植現有的 C/C++ Library，增加程式的復用性與前端的開發自由度&lt;/p>
&lt;p>Webassembly 其實也不是什麼新技術了，在 2017 年已經正式推出，並在&lt;code>四大瀏覽器&lt;/code>都能夠使用，Nodejs 也支援，但網路上相對的中文較少，例如記憶體操作、pass by reference 等等較少提及，這也是讓我頭疼許久的地方，花了兩天不斷試錯，趁跨年假期整理並分享&lt;/p>
&lt;p>以下兩天是主要參考的文章&lt;br>
&lt;a class="link" href="https://hacks.mozilla.org/2017/07/creating-a-webassembly-module-instance-with-javascript/" target="_blank" rel="noopener"
>Creating a WebAssembly module instance with JavaScript&lt;/a>&lt;br>
&lt;a class="link" href="https://developers.google.com/web/updates/2018/03/emscripting-a-c-library" target="_blank" rel="noopener"
>Emscripting a C library to Wasm
&lt;/a>&lt;br>
&lt;a class="link" href="https://becominghuman.ai/passing-and-returning-webassembly-array-parameters-a0f572c65d97" target="_blank" rel="noopener"
>Passing and returning WebAssembly array parameters
&lt;/a>&lt;/p>
&lt;p>Webassembly(Wasm) 主要目的是將其他語言透過編譯方式輸出瀏覽器可以運作的 bytecode，目前除了 C/C++ 外，Rust 也是個熱門的 Wasm 開發語言，周圍的生態系與工具鏈都相對完善；&lt;/p>
&lt;p>以下的教學主要專注於使用 &lt;code>Emscripten&lt;/code>，Emscripten 功用是將 C/C++ 編譯成 Wasm，除此之外提供 JS 嫁接到 Wasm 這端的處理(膠水程式)，例如說 malloc / free / printf / cout 等等 C/C++ 的標準函式庫支援的函式，&lt;code>目前 Wasm 不能直接 Access，只能透過 JS 去操作 WebAPI&lt;/code>，這些都必須在編譯時被納入實作，此外 Wasm 目前還不能像一般的 JS Library 直接 include 就能使用，而是要處理 Memory Mapping 等，這些 Emscripten 都會處理好&lt;/p>
&lt;p>主要教學項目有&lt;/p>
&lt;ol>
&lt;li>使用 Emscripten 產生範例 code&lt;/li>
&lt;li>移植乘法運算 C++ Code&lt;/li>
&lt;li>記憶體操作，關於 Pointer &amp;amp; Array&lt;/li>
&lt;li>Wasm 總結&lt;/li>
&lt;/ol>
&lt;h2 id="使用-emscripten-產生範例-code">使用 Emscripten 產生範例 code&lt;/h2>
&lt;h3 id="安裝-emscripten">安裝 Emscripten&lt;/h3>
&lt;p>&lt;a class="link" href="https://emscripten.org/docs/getting_started/downloads.html" target="_blank" rel="noopener"
>Emscripten 官方安裝步驟&lt;/a>，按照步驟安裝最新版的 Emscripten，確認安裝完成&lt;/p>
&lt;blockquote>
&lt;p>emcc &amp;ndash;version&lt;/p>
&lt;/blockquote>
&lt;h3 id="官方基礎教學-hello-world">官方基礎教學 Hello World&lt;/h3>
&lt;p>以下參考 &lt;a class="link" href="https://emscripten.org/docs/getting_started/Tutorial.html" target="_blank" rel="noopener"
>官方基礎教學 Hello World&lt;/a>，並翻譯(解釋)每個步驟&lt;/p>
&lt;h4 id="產生-hello_worldc">產生 hello_world.c&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Copyright 2011 The Emscripten Authors. All rights reserved.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Emscripten is available under two separate licenses, the MIT license and the
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * University of Illinois/NCSA Open Source License. Both these licenses can be
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * found in the LICENSE file.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;hello, world!&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>執行&lt;/p>
&lt;blockquote>
&lt;p>$ emcc build/hello_world.c -o hello_world.html&lt;/p>
&lt;/blockquote>
&lt;p>此時會輸出三個檔案，&lt;code>hello_world.html、hello_world.out.js、hello_world.wasm&lt;/code>&lt;/p>
&lt;p>&lt;code>-o&lt;/code> 指定輸出的檔案與檔名，如果沒有指定會輸出 &lt;code>a.out.js、a.wasm&lt;/code>；&lt;/p>
&lt;ul>
&lt;li>.html 檔是 Emscripten 方便開發者除錯用的網頁；&lt;/li>
&lt;li>.wasm 檔即是 binary 格式的 assembly code，人類無法閱讀；&lt;/li>
&lt;li>.js 檔是後續與 JS 整合會需要用到的檔案，也可以直接用 NodeJS 執行&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>$ node hell_world.out.js&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>-o&lt;/code> 如果有指定 &lt;code>{file_name}.html&lt;/code>，則會生成配合的前端頁面，顯示 main function 的執行結果&lt;/p>
&lt;p>有了 html 檔，可以使用 http server 用瀏覽器開啟網頁，例如 npm 套件 &lt;code>http-server&lt;/code>，在本地端開啟頁面查看結果&lt;/p>
&lt;p>C++ 的 code 雷同&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;hello, world!&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="乘法運算並移植到網頁上">乘法運算並移植到網頁上&lt;/h2>
&lt;p>上述的 hello_world 主要是檢測環境與工具鍊是否正常，接著開始暖身，用 C++ 寫一個簡單的整數乘法運算，輸入兩個整數，回傳兩整數相乘的結果，&lt;code>著重於如何將 Wasm 整合進前端中&lt;/code>&lt;/p>
&lt;h3 id="產生-multiplycpp">產生 multiply.cpp&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;emscripten/emscripten.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">extern&lt;/span> &lt;span class="s">&amp;#34;C&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">EMSCRIPTEN_KEEPALIVE&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="nf">multiply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">num1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">num2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">num1&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">num2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">multiply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>預設 Emscripten 產生的 .js 只會執行 main function，如果想要呼叫其他韓式必須在欲輸出 function 前加上 &lt;code>EMSCRIPTEN_KEEPALIVE&lt;/code>，在 Comile 時指定參數 &lt;code>-s NO_EXIT_RUNTIME=1&lt;/code> 避免 wasm 執行 main function 後直接退出&lt;/p>
&lt;p>另外如果是使用 C++ 而不是 C，建議在要輸出的 function 前加上 &lt;code>extern &amp;quot;C&amp;quot;&lt;/code>，主要是指定這一段程式碼用 C 的方式編譯，這樣輸出的 function 名稱會保持原狀，可以試著拿掉看看&lt;/p>
&lt;blockquote>
&lt;p>$ emcc build/multiply.cpp -s NO_EXIT_RUNTIME=1 -o multiply.js&lt;/p>
&lt;/blockquote>
&lt;p>此時會輸出 &lt;code>multiply.js &amp;amp; multiply.wasm&lt;/code>&lt;/p>
&lt;p>如果不確定 compiled 出來的檔案能不能運行，建議先 &lt;code>-o {filename}.html&lt;/code> 確認可以運作，接著再考慮移植&lt;/p>
&lt;h3 id="在網頁使用-multiplyoutjs">在網頁使用 multiply.out.js&lt;/h3>
&lt;p>獨立產生 index.html&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span> &lt;span class="na">lang&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;en&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;UTF-8&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;viewport&amp;#34;&lt;/span> &lt;span class="na">content&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">http-equiv&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;X-UA-Compatible&amp;#34;&lt;/span> &lt;span class="na">content&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;ie=edge&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Document&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;./multiply.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">onRuntimeInitialized&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Module&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_main&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_multiply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 請打開 Console
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>當我們打開 Console，可以看到 &lt;code>10&lt;/code>，以及 &lt;code>Module&lt;/code> 這個由 &lt;code>multiply.js&lt;/code> export 的 Object，當我們想要使用 Module 當中的參數，需要包在 &lt;code>onRuntimeInitialized&lt;/code> listener 當中，等 Module 初始化完成才能調用，Module 裡頭包含非常多的參數與 function，後續會再介紹&lt;/p>
&lt;p>而我們輸出的 function 會主動被加上 &lt;code>_&lt;/code> 前綴，如果要傳入 int 直接用 JS 的 number 就可以了&lt;/p>
&lt;p>甚至如果用 &lt;code>Module._multiply(2, &amp;quot;10&amp;quot;)&lt;/code> 都會成功輸出 20，傳入參數時會自動做型別轉換，如果輸入純字串則會回傳 0&lt;/p>
&lt;h2 id="記憶體操作關於-pointer--array">記憶體操作，關於 Pointer &amp;amp; Array&lt;/h2>
&lt;p>在 C/C++ 中，pointer 很常被直接當作參數傳遞，讓 sub function 直接操作 pointer 指向的記憶體位置，function return 後原 function 可以直接取值出來用&lt;/p>
&lt;p>目標是實作一個 filter function biggerThan，只有大於 target 的 element 會被塞進 array_pointer 指向的記憶體位置，size 指向最後的 array length&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 目標
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">biggerThan&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="nx">elements&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nx">elements&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">array_pointer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">size&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;emscripten/emscripten.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">extern&lt;/span> &lt;span class="s">&amp;#34;C&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">EMSCRIPTEN_KEEPALIVE&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">biggerThan&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">elementList&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">elementListLength&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">target&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">*&lt;/span>&lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">elementListLength&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">result&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">elementListLength&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">elementList&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">target&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">elementList&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">*&lt;/span>&lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">size&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;size mem position:&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">size&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">result mem position:&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>$ emcc build/bigger_than.cpp -O1 -s NO_EXIT_RUNTIME=1 -o bigger_than.js&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>-O1&lt;/code> 是指名要 compiler optimize 輸出結果，-O1 是初步優化，-O2 / -O3 是更進階耗時的優化，但要小心優化可能會移除需要的功能&lt;/p>
&lt;p>接著是 index.html&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span> &lt;span class="na">lang&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;en&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;UTF-8&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;viewport&amp;#34;&lt;/span> &lt;span class="na">content&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">http-equiv&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;X-UA-Compatible&amp;#34;&lt;/span> &lt;span class="na">content&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;ie=edge&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Document&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;./bigger_than.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">onRuntimeInitialized&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">elementList&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Int32Array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">elementListBuffer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">Module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_malloc&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">elementList&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">elementList&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">BYTES_PER_ELEMENT&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HEAP32&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">elementList&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">elementListBuffer&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">target&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Int32Array&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">resultBuffer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">Module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_malloc&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">BYTES_PER_ELEMENT&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HEAP32&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">result&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">resultBuffer&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="nx">result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">BYTES_PER_ELEMENT&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Int32Array&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">sizeBuffer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">Module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">size&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">size&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">BYTES_PER_ELEMENT&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HEAP32&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">size&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">sizeBuffer&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="nx">size&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">BYTES_PER_ELEMENT&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="sb">`mem position:\nsizeBuffer: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">sizeBuffer&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb"> resultBuffer: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">resultBuffer&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_biggerThan&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">elementListBuffer&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">elementList&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">target&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">resultBuffer&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">sizeBuffer&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">sizeInMem&lt;/span> &lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HEAP32&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">sizeBuffer&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="nx">Int32Array&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">BYTES_PER_ELEMENT&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">resultRef&lt;/span> &lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HEAP32&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">resultBuffer&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="nx">Int32Array&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">BYTES_PER_ELEMENT&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">resultInMem&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Int32Array&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sizeInMem&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">resultBuffer&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">resultRef&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HEAP32&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">resultRef&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="nx">Int32Array&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">BYTES_PER_ELEMENT&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nx">sizeInMem&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">resultInMem&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HEAP32&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">resultRef&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="nx">Int32Array&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">BYTES_PER_ELEMENT&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sizeInMem&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">resultInMem&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">resultBuffer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sizeBuffer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">elementListBuffer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 請打開 Console
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="arraybuffer--typedarray">ArrayBuffer &amp;amp; TypedArray&lt;/h4>
&lt;p>在開始之前，必須先了解 JS 如何處理 binary data，在 JS 中 binary data 是以 &lt;code>ArrayBuffer&lt;/code> 表示，ArrayBuffer 只能讀不能做其他的操作，只能透過 &lt;code>TypedArray&lt;/code> 與 &lt;code>Dataview&lt;/code>轉換，而 Wasm 中會用到的是 TypedArray&lt;/p>
&lt;p>TypedArray 有許多不同長度的類型，如 Int8Array / Int16Array，數字代表每個 element 的 bit 長度&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">buffer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">ArrayBuffer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">i8&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Int8Array&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">buffer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">i8&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">i8&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">i16&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Int16Array&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">buffer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">i16&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]);&lt;/span> &lt;span class="c1">// 5220，因為是 0x14 0x64
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果兩個 Type Array 從同一個 ArrayBuffer 生成，則兩者改動都會互相影響，如果遇到不同類型互轉，則高位在後低位在前，所以 &lt;code>i16[0] = i8[1] * 2^8 + i8[0]&lt;/code>
&lt;img src="https://media.prod.mdn.mozit.cloud/attachments/2014/09/16/8629/80522bcbdb9d77c4a4c72a289365ea63/typed_arrays.png"
loading="lazy"
>&lt;/p>
&lt;p>在 C/C++中，有多種不同長度的型別，例如 char / int / float / double 加上 signed / unsigned 等，就會一一對照到 JS 的 Typed Array
&lt;img src="https://yuanchieh.page/post/img/typedarray.jpeg"
loading="lazy"
>&lt;/p>
&lt;h4 id="pass-array-by-pointer">Pass Array by pointer&lt;/h4>
&lt;p>當我們要讓 C++ 讀取陣列，我們不能直接傳遞陣列，而是先在 JS 中把陣列放進 Memory &amp;ndash;&amp;gt; 接著傳遞 Memory 中的位址 &amp;ndash;&amp;gt; 從 Memory 位址讀取陣列的元素&lt;/p>
&lt;p>在 Wasm 中，一開始初始化會需要 Memory Object，表明整個 Wasm 能夠使用多大的記憶體，接著把資料放進記憶體當中，並取得存放的位址，將位址從 JS 傳遞給 C++，C++ 去相對應的記憶體空間將值取出&lt;/p>
&lt;p>Emscripten 簡化這個過程，改用 &lt;code>_malloc&lt;/code> 去取得記憶體空間，並由對應類別大小的 HEAP 塞入空間，此時會拿到記憶體位址&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">elementList&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Int32Array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">elementListBuffer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">Module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_malloc&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">elementList&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">elementList&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">BYTES_PER_ELEMENT&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">Module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HEAP32&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">elementList&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">elementListBuffer&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>這段話的翻譯是&lt;/p>
&lt;ol>
&lt;li>產生 [1, 2, 3, 4, 5, 6] 陣列，每個元素是 32 bits (4 bytes) 大，剛好對應 C++ 的 int 大小&lt;/li>
&lt;li>索取記憶體空間，_malloc 需指定要多大的 bytes 空間，此例需要 6 * 4 = 24 bytes，elementListBuffer 此時代表這塊記憶體的起始位置，每間隔 4 個 bytes 就是陣列的下一個元素&lt;/li>
&lt;li>因為每個元素是 32 bits，所以用 HEAP32 塞資料，這邊 elementListBuffer &amp;raquo; 2 是因為每個儲存單位是 4 bytes， &amp;raquo; 2 代表 / 4&lt;br>
可以想像是大小抽屜，JS 中操作最小單位是單一個 byte，如果是 Int8Array 則是一個抽屜對應一個單位，但如果是 Int32Array，就是一個抽屜對應四個單位，所以編號(位址)也會比小抽屜少四分之一&lt;/li>
&lt;/ol>
&lt;p>在 C++ 當中，要輪詢 elementList 陣列的值，就只要&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">elementListLength&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">elementList&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]....&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="pointer">Pointer&lt;/h4>
&lt;p>在 Wasm 中，pointer 是 32 bits，所以針對 result / size 都是用 Int32Array，即使 size 是整數而非&amp;quot;陣列&amp;quot;，但是一樣用 Int32Array 宣告&lt;/p>
&lt;p>先看 size，宣告方式相同，最後要取值時，同樣是去 Memory 中的位置找，記得一樣要做位址座標的切換&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Int32Array&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">sizeBuffer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">Module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">size&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">size&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">BYTES_PER_ELEMENT&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">Module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HEAP32&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">size&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">sizeBuffer&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="nx">size&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">BYTES_PER_ELEMENT&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 取值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">sizeInMem&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">Module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HEAP32&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">sizeBuffer&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="nx">Int32Array&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">BYTES_PER_ELEMENT&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="pointer-of-pointer">Pointer of pointer&lt;/h5>
&lt;p>再來是比較特別的 result，這其實是一個 pointer of pointer，先看 C++ 實作&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="o">*&lt;/span>&lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">elementListLength&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在 JS 層我並沒有先建立整個陣列，而是到了 C++ 才用 malloc 方式去索取陣列的記憶體空間，此時新增加的記憶體空間 JS 並不知道在哪裡，所以我必須想辦法回傳，此時可以透過 return value，我選擇直接修改 result 的值，暫存記憶體位址，再用這個位址去找真正的陣列所在處&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">resultRef&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">Module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HEAP32&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">resultBuffer&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="nx">Int32Array&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">BYTES_PER_ELEMENT&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">resultInMem&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Int32Array&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sizeInMem&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nx">sizeInMem&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">resultInMem&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">Module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HEAP32&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">resultRef&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="nx">Int32Array&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">BYTES_PER_ELEMENT&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>唸起來很擾口，但也就是多一次的記憶體位址的轉換&lt;/p>
&lt;h4 id="free">free&lt;/h4>
&lt;p>最後別忘了要釋放索取的記憶體，避免 Memory leak&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">Module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">resultBuffer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="總結">總結&lt;/h2>
&lt;p>WebAssembly 讓網頁開發的「部分功能」可以外包給給其他語言，讓網頁開發的疆域與技術更加的彈性與兼容，甚至未來可以有更多的跨語言協作的可能，十分令人期待&lt;/p>
&lt;p>這一篇教學介紹了 Emscripten 工具，與 C/C++ 編譯出的 Wasm 如何跟 JS 互動，包含基本的整數運算、陣列操作、Pointer 與記憶體存取&lt;/p>
&lt;p>下一篇預計介紹不使用 Emscripten，直接用 Clang 編譯 Wasm，還原到最簡單原始的狀態去認識 Wasm&lt;/p></description></item><item><title>如何設計 REST API</title><link>https://yuanchieh.page/posts/2019/2019-09-18-%E5%A6%82%E4%BD%95%E8%A8%AD%E8%A8%88-rest-api/</link><pubDate>Wed, 18 Sep 2019 00:08:40 +0000</pubDate><guid>https://yuanchieh.page/posts/2019/2019-09-18-%E5%A6%82%E4%BD%95%E8%A8%AD%E8%A8%88-rest-api/</guid><description>&lt;p>後端工程師最基本的技能要求是設計符合 HTTP-based REST 的API，工作兩年多快三年，自己腦中第一反應大概會是&lt;/p>
&lt;blockquote>
&lt;p>把URL視為資源路徑的描述，把對應的CRUD 操作對應至 HTTP Method，例如要下一筆訂單是 &lt;code>POST /booking&lt;/code> ，取得單筆訂單是 &lt;code>GET /booking/1&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>但世界沒有這麼單純，如果是遇到複雜的操作時，難以運用 HTTP 的 Method動詞 + URL 名詞的方式描述，那該怎麼辦呢？&lt;/p>
&lt;p>例如說最近在工作上遇到如何設計一次刪除多筆資料的API該怎麼辦？&lt;/p>
&lt;p>尋找答案的過程中，看到 Google 與 Microsoft 有公開他們的 API Design Guideline，並分享其中思考的眉角，其中包含了&lt;/p>
&lt;ol>
&lt;li>REST 的基礎觀念&lt;/li>
&lt;li>應付複雜場景的考量&lt;/li>
&lt;li>錯誤碼的處理&lt;/li>
&lt;li>參數名稱與版本控制&lt;/li>
&lt;/ol>
&lt;p>&lt;a class="link" href="https://cloud.google.com/apis/design/" target="_blank" rel="noopener"
>&lt;strong>API Design Guide | Cloud APIs | Google Cloud&lt;/strong>&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/microsoft/api-guidelines/blob/vNext/Guidelines.md" target="_blank" rel="noopener"
>&lt;strong>microsoft/api-guidelines&lt;/strong>&lt;/a>&lt;/p>
&lt;p>以 Google 文件為主，Microsoft 文件為輔，整理過後分享個人筆記&lt;/p>
&lt;h3 id="一點-rest介紹">一點 REST 介紹&lt;/h3>
&lt;p>Roy Fielding 在西元 2000年提出了 &lt;a class="link" href="https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm" target="_blank" rel="noopener"
>Representational State Transfer(REST ) 網站架構設計規範&lt;/a>，同時他也是 URL / Http 1.0 / Http 1.1 標準制定的參與者，所以 REST 的概念很自然的與 HTTP 相當吻合，一開始 REST被誤以為是 &lt;code>HTTP object model&lt;/code>一種 HTTP的實作，但實際上 REST描繪的是一個正確架構的 Web 應用程式：&lt;code>用戶選擇連結(state transition)，進而得到下一個結果(representing the next state of the application)&lt;/code> ，其中提出了 REST 架構需要符合以下六大原則&lt;/p>
&lt;h3 id="client-server">Client / Server&lt;/h3>
&lt;p>依據關注點分離( Separation of Concern)，將用戶介面跟資料儲存切割，方便兩者獨立運作與維護&lt;/p>
&lt;h3 id="stateless">Stateless&lt;/h3>
&lt;p>每一次的連線本身都攜帶足夠的資訊，而不用依賴於上一次連線的狀態，增加服務的可靠性與擴展性&lt;/p>
&lt;h3 id="cache">Cache&lt;/h3>
&lt;p>根據 Request，Response 可以決定是否能被緩存，增加使用效率&lt;/p>
&lt;h3 id="uniform-interfaces">Uniform Interfaces&lt;/h3>
&lt;p>如同程式設計，元件間也需要制定介面(interface)解耦合與溝通，雖然會降低一些效率，不過增加元件獨立的運作與維護，其中包含四個規範&lt;/p>
&lt;ol>
&lt;li>&lt;strong>identification of resources&lt;/strong>：定位到特定資源上，資源可以是圖片、文字、特定服務(如今天加州天氣)、一個實體的人等等&lt;/li>
&lt;li>&lt;strong>manipulation of resources through representations&lt;/strong>：Server 提供可以操作資源的方法，包含了描述資源本身的meta-data，以及如何操作 data的 Control data&lt;/li>
&lt;li>&lt;strong>self-descriptive messages&lt;/strong>：訊息本身資訊量是足夠的，在跨元件之間可以不斷的被傳遞而不需要有額外的處理(Stateless)&lt;/li>
&lt;li>&lt;strong>hypermedia as the engine of application state(HATEOAS)&lt;/strong>：&lt;br>
模擬瀏覽網頁，加載完首頁後，後續操作都是利用網頁上的超連結探索網站；&lt;br>
套用同樣的邏輯至 REST Server，Response 包含針對此資源探索的連結與操作方式，如跟醫師預約後，回傳結果，同時包含查詢預約、查詢醫生資料、更改預約等操作都一併回傳&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;appointment&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;slot&lt;/span> &lt;span class="na">id =&lt;/span> &lt;span class="s">&amp;#34;1234&amp;#34;&lt;/span> &lt;span class="na">doctor =&lt;/span> &lt;span class="s">&amp;#34;mjones&amp;#34;&lt;/span> &lt;span class="na">start =&lt;/span> &lt;span class="s">&amp;#34;1400&amp;#34;&lt;/span> &lt;span class="na">end =&lt;/span> &lt;span class="s">&amp;#34;1450&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;patient&lt;/span> &lt;span class="na">id =&lt;/span> &lt;span class="s">&amp;#34;jsmith&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;link&lt;/span> &lt;span class="na">rel =&lt;/span> &lt;span class="s">&amp;#34;/linkrels/appointment/cancel&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">uri =&lt;/span> &lt;span class="s">&amp;#34;/slots/1234/appointment&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;link&lt;/span> &lt;span class="na">rel =&lt;/span> &lt;span class="s">&amp;#34;/linkrels/appointment/addTest&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">uri =&lt;/span> &lt;span class="s">&amp;#34;/slots/1234/appointment/tests&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;link&lt;/span> &lt;span class="na">rel =&lt;/span> &lt;span class="s">&amp;#34;self&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">uri =&lt;/span> &lt;span class="s">&amp;#34;/slots/1234/appointment&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;link&lt;/span> &lt;span class="na">rel =&lt;/span> &lt;span class="s">&amp;#34;/linkrels/appointment/changeTime&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">uri =&lt;/span> &lt;span class="s">&amp;#34;/doctors/mjones/slots?date=20100104&amp;amp;status=open&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;link&lt;/span> &lt;span class="na">rel =&lt;/span> &lt;span class="s">&amp;#34;/linkrels/appointment/updateContactInfo&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">uri =&lt;/span> &lt;span class="s">&amp;#34;/patients/jsmith/contactInfo&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;link&lt;/span> &lt;span class="na">rel =&lt;/span> &lt;span class="s">&amp;#34;/linkrels/help&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">uri =&lt;/span> &lt;span class="s">&amp;#34;/help/appointment&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;/appointment&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="layered-system">Layered System&lt;/h4>
&lt;p>一個完整的系統可以由多個子元件疊加，例如 Cache Server / Api Server / Proxy / Agent 等，每個元件僅可意識到相鄰的元件&lt;/p>
&lt;h4 id="code-ondemand">Code On Demand&lt;/h4>
&lt;p>Client 可以依照需求加載新的 script 執行&lt;/p>
&lt;p>這代表 REST 不一定要綁定 HTTP，只是 HTTP很巧妙的跟 REST概念十分貼近，REST的概念也可以對照到 HTTP 實作上(畢竟 Roy Fielding都有參與其中&lt;/p>
&lt;p>回過頭來看常見的 RESTful API定義，比較像是 REST + HTTP 的混合產物，快速翻完 Roy Fielding 的 &lt;a class="link" href="https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm" target="_blank" rel="noopener"
>Architectural Styles and the Design of Network-based Software Architectures&lt;/a>，其中的 6.2 URI 定義是&lt;code>特定資源的表徵 (representation of the identified resource)&lt;/code>，最一開始的 Web 是在傳輸文件或超連結(hypertext)，所以 Resource 常直接對應到檔案文件，而 URI 則對應到實際檔案的路徑；這會帶來幾個不好的影響，例如說文件被修改了該如何表示 / 如何表達服務( Service )而非文件本身 等等；&lt;br>
良好的 Resource 定義應該是**&lt;em>盡可能固定不變&lt;/em>** 且 &lt;strong>&lt;em>抽象於實際檔案儲存本身&lt;/em>&lt;/strong>，而是一種高層級的映射概念，當 Server 收到後去找出對應的實作內容，更重要的是傳達使用者的意圖，所以一個 Resource 概念可能橫跨多的檔案，也可以多個 Resource 描述同一個檔案&lt;/p>
&lt;p>用 URI描述資源後，需要再加上用戶對於資源的操作(representation )，就可以組成語意 (Semantic)，對應回 HTTP，不同的操作對應不同的方法( Method )，如 GET 表示要取得 URI所代表資源的資訊 / POST 表示創建 URI資源的子資源等，則定義在 HTTP 1.1 當中的 &lt;a class="link" href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.5" target="_blank" rel="noopener"
>Method Definitions&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>以個人淺見，談到 REST Architecture 指的應該是符合 Roy Fielding 規範的 6大原則的網站架構設計；&lt;br>
而目前常用的 RESTful API 設計原則則是 REST中的 Resource 解釋加上 HTTP 對於 Method 操作的補充，兩者混合的設計原則&lt;/p>
&lt;/blockquote>
&lt;h3 id="回歸-restful-api--restapi">回歸 RESTful API / REST API&lt;/h3>
&lt;p>根據 Google 文件，RESTful API 定義主要是 &lt;code>可個別呼叫的「資源」(API 的「名詞」)「集合」做為模型。不同的資源有各自的參照名稱，也就是所謂的**[**資源名稱**](https://cloud.google.com/apis/design/resource_names?hl=zh-tw)**，並且是透過一套「方法」來操控&lt;/code>&lt;/p>
&lt;p>這樣的理念可以被很好的套用在 HTTP 1.1 上，因為 URL 可以用來描述資源路徑，HTTP Method 常用的也就是 GET / POST / PUT / PATCH / DELETE，正好對應資源的操作，根據 Google 文件，有 74%的公開 HTTP API 都是依據 REST 設計規範；&lt;br>
HTTP被廣泛應用，但也不是唯一的跨進程溝通的規範，如果是公司內網或是要求更低溝通上的overhead，會採用 RPC ( Google推廣自家的 gRPC)，REST 也可以被套用在這上面&lt;/p>
&lt;h3 id="資源-resource">資源 Resource&lt;/h3>
&lt;p>面向資源導向設計的 API，需要先規劃資源的層級，每個資源的節點可以是單個資源(Resource)或是同一項資源的集合(Collection)&lt;br>
每個資源或集合必須有獨特的 id 去區分，在命名時盡可能表達清楚，避免使用以下的名詞如 resource / object / item 等；&lt;br>
且命名時已複數名詞表示，例如 &lt;code>/users/123/events/456&lt;/code>&lt;/p>
&lt;p>例如 Gmail API 會有一群用戶的集合，每個用戶底下有訊息的集合 / 標籤的集合等等&lt;/p>
&lt;p>-- user&lt;br>
|&amp;mdash; message&lt;br>
|&amp;mdash; label&lt;/p>
&lt;p>URL 的長度在Spec 中沒有規範，但在現實中有些瀏覽器會有長度限制，可以的話還是保持在 2000 字元以內比較保險&lt;/p>
&lt;p>&lt;a class="link" href="https://stackoverflow.com/questions/417142/what-is-the-maximum-length-of-a-url-in-different-browsers/417184" target="_blank" rel="noopener"
>&lt;strong>What is the maximum length of a URL in different browsers?&lt;/strong>&lt;/a>&lt;/p>
&lt;p>Microsoft 文件也是標榜類似的寫法，但額外建議不要讓資料的層級超過三層 &lt;code>/collection/item/collection&lt;/code> ，例如說 &lt;code>/customers/1/orders/99/products&lt;/code> 可以分拆成 &lt;code>/customers/1/orders&lt;/code> + &lt;code>/orders/99/products&lt;/code>&lt;/p>
&lt;p>另外在 API的資源層級不要底層的資料結構有太緊密的關係，例如使用關聯性資料庫不一定要剛好對準 Table，API 應該是要更高層度的抽象化，避免之後資料庫的更動耦合了 API的資源路徑。&lt;/p>
&lt;h3 id="操作-methods">操作 Methods&lt;/h3>
&lt;p>面向資源導向設計的 API 側重於資源的描述而非操作的描述，所以大量資源的描述僅會搭配有限的操作，標準的操作是 List / Get / Create / Update / Delete 這五項&lt;/p>
&lt;p>操作有可能不會是立即發生，需要一段時間才會生效，此時可以回一個長時操作的資源，用以查詢進度或是狀態等的方式，有點像是叫號取餐的遙控器&lt;/p>
&lt;h4 id="list">List&lt;/h4>
&lt;ul>
&lt;li>必須使用 &lt;code>GET&lt;/code>&lt;/li>
&lt;li>Request 不能有 Body&lt;/li>
&lt;li>Response Body 包含以陣列表示的資源，與其餘選擇性的操作(如分頁操作)&lt;/li>
&lt;/ul>
&lt;h4 id="get">GET&lt;/h4>
&lt;ul>
&lt;li>必須使用 &lt;code>GET&lt;/code>&lt;/li>
&lt;li>Request 不能有 Body&lt;/li>
&lt;li>Response Body 對應到完整的資源描述&lt;/li>
&lt;/ul>
&lt;h4 id="create">CREATE&lt;/h4>
&lt;ul>
&lt;li>必須使用 &lt;code>POST&lt;/code>&lt;/li>
&lt;li>Request Body 必須包含新增資源的內容&lt;/li>
&lt;li>如果支援 client side 指定 &lt;resource>_id，則提供該欄位於 Request Body，但如果發生衝突需回傳 &lt;code>ALREADY_EXISTS&lt;/code>&lt;/li>
&lt;li>Response Body 可以&lt;/li>
&lt;/ul>
&lt;h4 id="update">Update&lt;/h4>
&lt;ul>
&lt;li>如果是部份更新使用 &lt;code>PATCH&lt;/code>&lt;/li>
&lt;li>如果是全部更新(覆蓋)使用 &lt;code>PUT&lt;/code>，如果 Request Body 沒有夾帶的欄位，視為清除該欄位&lt;/li>
&lt;li>如果 Patch更新不存在資源，API 可以選擇是否支援 Upsert&lt;code>更新不到就創建&lt;/code>的功能，如果否則回傳 NOT_FOUND&lt;/li>
&lt;li>Response Body 必須是更新後的資源本身&lt;/li>
&lt;li>Update 僅用於更新，如果是其餘複雜操作如重新命名資源、改變資源路徑等，請使用客製化操作&lt;/li>
&lt;/ul>
&lt;p>如果以 JSON 為資料交換格式，Patch 有兩種方法 JSON patch / JSON merge patch，在資料儲存中，&lt;code>null&lt;/code> 的含義有些模糊地帶，如果 Request JSON 欄位夾帶 null，這是代表&lt;code>移除該欄位&lt;/code>還是&lt;code>更新欄位成為 null&lt;/code> 呢？&lt;/p>
&lt;p>如果 Header 中的 Content-Type 是 &lt;code>application/merge-patch+json&lt;/code> 則代表 null 移除該欄位，此時需注意資料結構就不建議欄位儲存 null避免混淆，更多參考 &lt;a class="link" href="https://tools.ietf.org/html/rfc7396" target="_blank" rel="noopener"
>RFC: JSON Merge Patch&lt;/a>；&lt;/p>
&lt;p>如果希望針對欄位有更精確的操作描述，例如新增、刪除、取代、複製、搬移、驗證(test)等，可以參考 &lt;a class="link" href="https://tools.ietf.org/html/rfc6902" target="_blank" rel="noopener"
>JSON patch&lt;/a>，Content-Type 為 &lt;code>application/json-patch+json&lt;/code> ，用陣列表述操作的集合，操作範例如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="nt">&amp;#34;op&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;test&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;path&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;/a/b/c&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;value&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;foo&amp;#34;&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="nt">&amp;#34;op&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;remove&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;path&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;/a/b/c&amp;#34;&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="nt">&amp;#34;op&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;add&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;path&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;/a/b/c&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;value&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="s2">&amp;#34;foo&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;bar&amp;#34;&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="nt">&amp;#34;op&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;replace&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;path&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;/a/b/c&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;value&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">42&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="nt">&amp;#34;op&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;move&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;from&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;/a/b/c&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;path&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;/a/b/d&amp;#34;&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="nt">&amp;#34;op&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;copy&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;from&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;/a/b/d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;path&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;/a/b/e&amp;#34;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="delete">DELETE&lt;/h4>
&lt;ul>
&lt;li>必須使用 &lt;code>DELETE&lt;/code>&lt;/li>
&lt;li>不能有 Request Body&lt;/li>
&lt;li>如果是立即刪除，則 Response Body 為空值&lt;/li>
&lt;li>如果是需要長時間執行，回傳相對應的長時操作&lt;/li>
&lt;li>如果只是把資源標記刪除而非硬刪除，回傳更新的資源&lt;/li>
&lt;li>刪除必須是冪等性操作，不論操作幾次都必是是刪除該資源，但回應內容可以改變，第一次確實刪掉資源回復成功，後續刪除可以回覆 NOT_FOUND&lt;/li>
&lt;/ul>
&lt;h4 id="custom-method">Custom Method&lt;/h4>
&lt;p>除了上述五種操作外，可能會有些操作不再這五種範疇之中，此時就可以自行定義，例如說取消刪除、大量更新等&lt;/p>
&lt;p>自定義的方法須以 &lt;code>:&lt;/code> 放在 URL的最後方，且常見的搭配是用 &lt;code>POST&lt;/code>，因為可以夾帶Body；&lt;br>
但也可以視情況使用其他的 HTTP Method (Patch 不建議使用外)，但仍須遵守 HTTP Method 使用的規範，例如冪等性與是否能夾帶 Body等&lt;/p>
&lt;p>Google 提供幾種自定義方法的用途&lt;/p>
&lt;p>1. POST :cancel 取消操作&lt;br>
2. GET :batchGet 一次性取得多筆資料&lt;br>
3. POST :move 將資源移到別處&lt;/p>
&lt;p>batchGet 也可以使用 POST，例如 POST &lt;a class="link" href="https://mybusiness.googleapis.com/v4/%7Bname=accounts/*%7D/locations:batchGet" target="_blank" rel="noopener"
>https://mybusiness.googleapis.com/v4/{name=accounts/*}/locations:batchGet&lt;/a>`
在 Body 中有對查詢的內容有更近一步的描述&lt;/p>
&lt;p>Microsoft 提議就把非名詞放進 URL中，例如一個計算機的加法 API可以設計為 &lt;code>GET /add?operand1=99&amp;amp;operand2=1&lt;/code> ，其餘的就遵守 HTTP Method 操作方式。&lt;/p>
&lt;p>在 AWS 文件中，Custom Method 是以 Query String 方式存在，如 &lt;a class="link" href="https://docs.aws.amazon.com/AmazonS3/latest/API/multiobjectdeleteapi.html" target="_blank" rel="noopener"
>刪除多筆物件&lt;/a>&lt;code>/?delete&lt;/code> ，個人是覺得容易與其他的 Query String 混淆，在 Parsing上也比較麻煩點，不是很喜歡這樣的作法&lt;/p>
&lt;blockquote>
&lt;p>個人偏好 Google的做法，讓 URL組成全部都是名詞，乾淨的表示資料層級，Custom Method 就以一個特殊的方式宣告，可以良好與 REST API共存&lt;/p>
&lt;/blockquote>
&lt;h4 id="http-media-type-與header">HTTP Media Type 與 Header&lt;/h4>
&lt;p>最後別忘了 Request 與 Response 應盡量遵守 HTTP規範，使用正確的 Status Code 與 Header，讓 API設計更精確，例如&lt;/p>
&lt;ol>
&lt;li>交換的資料格式為 json 就要宣告 &lt;code>Content-Type: application/json;charset=utf-8&lt;/code>&lt;/li>
&lt;li>200&lt;br>
201(Created) : 建立新資源&lt;br>
202(Accepted)：接受請求，但不是立即發生&lt;br>
204 (No Content)：沒有要回傳資料&lt;/li>
&lt;/ol>
&lt;h3 id="versioning">Versioning&lt;/h3>
&lt;p>在維護 API過程，會遇到更動資料結構或是修改邏輯的地方，如果可以的話又不希望影響原有 API的操作，此時就需要做版本控制，版號的命名可以參考 &lt;a class="link" href="https://semver.org/" target="_blank" rel="noopener"
>Semantic Version&lt;/a> X.Y.Z 方式表示&lt;/p>
&lt;ol>
&lt;li>X 大版號表示有 breaking change，向前不相容&lt;/li>
&lt;li>Y 小版號表示有新增 function，或是更動是向前相容的&lt;/li>
&lt;li>Z 補丁版號表示 Bug 修正&lt;/li>
&lt;/ol>
&lt;p>一般來說 API 對外用大版號表示，如 v1 / v2，小版號跟補丁版號出現在文件的版本號上&lt;/p>
&lt;p>version 常見可以放在幾個地放&lt;/p>
&lt;ol>
&lt;li>URL 當中，放在 Domain 後的第一層，如 &lt;code>https://example.com/v1&lt;/code>&lt;/li>
&lt;li>夾帶在 Query String中，如 &lt;a class="link" href="https://example.com?version=v1" target="_blank" rel="noopener"
>https://example.com?version=v1&lt;/a>&lt;/li>
&lt;li>放在 Custom Header當中&lt;/li>
&lt;li>放在 Header Accept 中，如 &lt;code>application/vnd.adventure-works.v1+json&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>在採用 versioning 時，要考量到 web cache 的機制，通常 cache 是針對 URL，所以前兩者比較推薦&lt;/p>
&lt;h3 id="error">Error&lt;/h3>
&lt;p>常見作法會回傳錯誤代碼、錯誤的簡述、錯誤的詳細內容，方便開發者做錯誤處理，例如以下格式&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;error&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;code&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;BadArgument&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;message&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Multiple errors in ContactInfo data&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;target&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;ContactInfo&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;details&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;code&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;NullValue&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;target&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;PhoneNumber&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;message&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Phone number must not be null&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">....&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Code 常見還可以用數字表示，方便開發者透過文件快速查詢，但也不要忘了回傳該次錯誤的內容描述&lt;/p>
&lt;p>別忘了要搭配正確的 HTTP 錯誤碼使用&lt;br>
400(Bad Request)：Server無法理解，例如參數缺少或錯誤&lt;br>
401(Unauthorized)：授權錯誤，可能是 Token失效等&lt;br>
403(Forbidden)：無訪問權限，想取得超過用戶授權的資源&lt;br>
404(Not Found)：查無資源&lt;br>
…..&lt;/p></description></item><item><title>讓 Node.js 跑得更快! ES4X 專案與Graal VM 介紹</title><link>https://yuanchieh.page/posts/2019/2019-08-18-%E8%AE%93-node.js-%E8%B7%91%E5%BE%97%E6%9B%B4%E5%BF%AB-es4x-%E5%B0%88%E6%A1%88%E8%88%87graal-vm-%E4%BB%8B%E7%B4%B9/</link><pubDate>Sun, 18 Aug 2019 11:31:29 +0000</pubDate><guid>https://yuanchieh.page/posts/2019/2019-08-18-%E8%AE%93-node.js-%E8%B7%91%E5%BE%97%E6%9B%B4%E5%BF%AB-es4x-%E5%B0%88%E6%A1%88%E8%88%87graal-vm-%E4%BB%8B%E7%B4%B9/</guid><description>&lt;p>文字版：&lt;a class="link" href="https://dev.to/pmlopes/javascript-on-graalvm-120f" target="_blank" rel="noopener"
>https://dev.to/pmlopes/javascript-on-graalvm-120f&lt;/a>&lt;/p>
&lt;p>身為一名工程師，想辦法讓自己的程式碼執行的更快，似乎是一種天性，當我們想要優化 Node.js Server 的執行速度時，第一印象應該都是如何寫出更好的程式碼、用更快的演算法，這些當然都是優化的一環，但如果拉遠一點想，有沒有辦法去&lt;code>優化 Node.js Runtime本身&lt;/code>呢 ?!&lt;/p>
&lt;p>作者提到在著名的 framework benchmark 中，JS 的執行效率排名很後面，如果用 FlameChart 分析，會發現絕大多數的時間是在底層也就是 V8 Engine 與 Libuv 上&lt;/p>
&lt;p>&lt;img src="https://yuanchieh.page/post/img/0__8pUeUi9pzwXJ9tkz.png"
loading="lazy"
>&lt;/p>
&lt;p>&lt;img src="https://blog.zenika.com/2011/04/10/nodejs/"
loading="lazy"
>&lt;/p>
&lt;p>左圖：&lt;a class="link" href="https://blog.zenika.com/2011/04/10/nodejs/" target="_blank" rel="noopener"
>https://blog.zenika.com/2011/04/10/nodejs/&lt;/a> 右圖：截自影片&lt;/p>
&lt;p>所以我們再怎麼優化 JS code，就如同冰山一角般，是很難取得非常大幅度的效能提升，那該怎麼辦呢？&lt;/p>
&lt;p>Paulo Lopes 設計了&lt;a class="link" href="https://github.com/reactiverse/es4x" target="_blank" rel="noopener"
>ES4X&lt;/a> 專案，主要是用 &lt;code>GraalVM 取代 V8&lt;/code> 與 &lt;code>Vert.x 取代 Libuv&lt;/code> ，基本上就是將底層從 C/C++ 工具鍊換成了 JVM 為主的工具鍊，根據作者的 benchmark，在不同應用面可提升 120% ~ 700% 的效能&lt;/p>
&lt;p>&lt;a class="link" href="https://www.jetdrone.xyz/2018/08/06/ES4X-JavaScript.html" target="_blank" rel="noopener"
>&lt;strong>Run your JavaScript server 700% faster!&lt;/strong>&lt;/a>&lt;/p>
&lt;h2 id="vertx">Vert.x&lt;/h2>
&lt;p>Vertx 類似於 Libuv 的功能，提供 Event-Driven 與 Non-blocking 的框架，提供如 TCP / File 操作 / DNS / HTTP / Timer等 API支援，其核心概念是透過 Event Loop 方式達到事件驅動的開發方式，大概瞄過去跟 Javascript 的開發理念非常吻合，像是&lt;/p>
&lt;h3 id="callback-function">Callback Function&lt;/h3>
&lt;p>為每個事件註冊 Handler，等到事件完成後推進 Event Loop 等待執行， &lt;code>Don't call us, we will call you.&lt;/code>&lt;/p>
&lt;h3 id="never-block-eventloop">Never block Event Loop&lt;/h3>
&lt;p>這點雷同於 Node.js，但是有一點不同是 Node.js 採用 Single Event Loop，但是Vertx 採用 Multiple Event Loop，主要是更有效運用 multi-core 的機器；&lt;br>
雖然採用了 Multiple Event Loop，但是為了避免 Context Switch 與增進性能，如果 handler A 在 Event Loop1 執行，後續的 Callback 也都位在 Event Loop1 執行&lt;/p>
&lt;h3 id="how-to-run-blockingcode">How to run blocking code&lt;/h3>
&lt;p>現實上不可避免還是會需要執行耗時的運算或是運行用 sync 設計的函式庫，這時可以用 executeBlocking，類似於 Promise的設計，但會運作到從 Worker Thread Pool 取得的 Thread 上，避免卡住 Event Loop&lt;/p>
&lt;p>但文件描述到 executeBlocking 雖然是用於 blocking code execution，但建議超過 10s 的操作還是另外管理 Thread&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">vertx&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">executeBlocking&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">function&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">promise&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Call some blocking API that takes a significant amount of time to return_
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">var&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">someAPI&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">blockingMethod&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">promise&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">complete&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">},&lt;/span> &lt;span class="n">function&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">res&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">res_err&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">console&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">log&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;The result is: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="concurrent-composition">Concurrent composition&lt;/h3>
&lt;p>非同步操作一大要解決的問題就是操作順序，Vertx 提供像 &lt;code>CompositeFuture.all、CompositeFuture.any&lt;/code> 等 API，從 JS 角度應該都不陌生&lt;/p>
&lt;p>直接使用 Vertx 的 JS 方案有一個很大的問題&lt;/p>
&lt;blockquote>
&lt;p>目前是基於 Nashorn 這套 JS Engine，僅支援到 ES 5.1並不支援 ES6 以後的語法，如果 Library 用 ES6 以後語法寫也都不支援&lt;/p>
&lt;/blockquote>
&lt;p>這算是致命傷了吧，如果不能整合現在的 JS 生態系那應該很少人敢採用這套方案。&lt;/p>
&lt;p>所以 ES4X 是一個全新基於 Vertx 開發的 &lt;code>JS Runtime&lt;/code>，加入了 ES6+ 的支援更好與現在 JS生態系整合，所以 Promise / async-await 等等都可以採用，同時 Vertx 的語法也同時支援，作者提到下一版的 Vertx 會棄用現有的 Vertx JS 改用 ES4X。&lt;/p>
&lt;blockquote>
&lt;p>題外話：&lt;br>
作者人很好，在文章底下提問很多疑惑都在 24 hr 內得到解答，真的是很感謝&lt;/p>
&lt;/blockquote>
&lt;h2 id="graalvm">GraalVM&lt;/h2>
&lt;p>GraalVm 是一個提供多語言的運行環境，透過 Graal Compiler 編譯成 Java Bytecode 並執行於 Java HotSpot VM上，所以可以兼容於 JVM-based 的語言如 Java/Scala/Kotlin等；&lt;br>
透過 Truffer framework，可以兼容其他的程式語言，如JS/Python/R/Ruby等等&lt;/p>
&lt;p>&lt;img src="https://yuanchieh.page/post/img/0__pH1347fH__vCQeKkD.jpg"
loading="lazy"
>&lt;/p>
&lt;p>許多程式語言都必須要有一個良好的運行環境 Runtime，但是要打造一個安全、高效的運行環境是非常困難且耗時的，例如說 JS的 V8 Engine 也是 Google多年的投入才有這麼好的成果，其他語言相較之下沒有這麼多資源，自然運行的速度就很慢；&lt;br>
所以 GraalVM希望透過通用化虛擬化技術，讓不同的程式語言只要用 Java 透過&lt;a class="link" href="https://github.com/oracle/graal/tree/master/truffle" target="_blank" rel="noopener"
>Truffle&lt;/a> Framework 實作該語言的 AST，後續的運行就交給 GraalVM，降低新語言開發的困難&lt;/p>
&lt;p>除了讓原本的程式語言執行得更快，採用 GraalVM另一大好處是可以混合語言(Polyglot)開發，例如 JS內使用 R的套件，讓不同的語言發揮各自的長處，而且&lt;code>效能不受到跨語言的影響&lt;/code>，因為不同的語言最後都是通過 Truffle Framework 生成 Graal Compiler 了解的AST，最後 Compile 出來的機器碼不會因為不同語言而有所差異&lt;/p>
&lt;p>更多的細節可以參考這支影片&lt;/p>
&lt;h3 id="實作用網頁顯示圖表-採用-graalvm-與es4x">實作 — 用網頁顯示圖表 /採用 GraalVM 與 ES4X&lt;/h3>
&lt;p>簡單整合兩者的 Example Code，用 ES4X 執行一個 Web Server，並用 GraalVm 當作運行環境，採用 R繪製圖表。&lt;/p>
&lt;h4 id="安裝">安裝&lt;/h4>
&lt;p>到 &lt;a class="link" href="https://github.com/oracle/graal/releases/tag/vm-19.1.1" target="_blank" rel="noopener"
>https://github.com/oracle/graal/releases/tag/vm-19.1.1&lt;/a> 下載安裝檔，解壓縮後加入路徑&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">export&lt;/span> &lt;span class="nv">PATH&lt;/span>&lt;span class="o">=&lt;/span>&amp;lt;檔案位置&amp;gt;/graalvm-ce-19.1.1/Contents/Home/bin:&lt;span class="nv">$PATH&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">export&lt;/span> &lt;span class="nv">JAVA_HOME&lt;/span>&lt;span class="o">=&lt;/span>&amp;lt;檔案位置&amp;gt;/Contents/Home
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>設定好之後，可以使用以下幾個 command，node 改成用 GraalVM執行，預設僅支援 Java/Javascript，如果需要其他語言則要 &lt;code>$gu install python&lt;/code> 等&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ js
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">runs a JavaScript console with GraalVM.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ node
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">replacement &lt;span class="k">for&lt;/span> Node.js, using GraalVM’s JavaScript engine.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ lli
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">is a high-performance LLVM bitcode interpreter integrated with GraalVM.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ gu &lt;span class="o">(&lt;/span>GraalVM Updater&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">can be used to install language packs &lt;span class="k">for&lt;/span> Python, R, and Ruby.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>簡單試一下跨語言的特性&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 儲存成 test.js
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">array&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">Polyglot&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nb">eval&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;python&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;[1,2,42,4]&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">$&lt;/span> &lt;span class="nx">node&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="nx">polyglot&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="nx">jvm&lt;/span> &lt;span class="nx">test&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">js&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用 &lt;code>Ployglot.eval&lt;/code> 可以執行其他指定語言的語法，&lt;/p>
&lt;p>剛執行時會需要花比較多的時間 warn up，所以如果要當作 Command line tool 或其他生命週期短的應用程式，就建議繼續使用 Nodejs 即可；&lt;br>
長時間運行的話，GraalVM 的效能與 V8 其實是差不多的，但如果多考量跨語言的特性，GraalVM 會是個不錯的選擇&lt;/p>
&lt;h2 id="es4x">ES4X&lt;/h2>
&lt;p>先安裝初始化&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ npm install -g es4x-pm
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ mkdir &lt;span class="nb">test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ npm init
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ es4x init
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 安裝所需套件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ npm install @vertx/unit --save-dev
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ npm install @vertx/core --save-prod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ npm install @vertx/web --save-prod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ npm install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>index.js，接著用 &lt;code>$npm run start&lt;/code> 執行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">/// &amp;lt;reference types=&amp;#34;@vertx/core/runtime&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @ts-check
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">vertx&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">createHttpServer&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">requestHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">end&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;hello world.&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8080&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>需注意，如果要達到最佳性能的提升需要使用它提供的 web framework &lt;code>@vertx/web&lt;/code>，如果是使用像 Express.js底層的 System API Call 就不會走 Vertx，而是用當下 Runtime 環境的處理方式 (Node.js or GraalVM)，細節還需要更近一步理解專案才能解釋，不過從作者的描述現況是如此，所以舊專案要移植會重寫的門檻&lt;/p>
&lt;p>另外目前不支援 GraalVM的 Polyglot，已回報給作者需要等他實作。&lt;/p>
&lt;h2 id="總結">總結&lt;/h2>
&lt;p>跳脫框架，以前沒想過透過替換 JS Runtime 可以換取性能的提升，也不曾接觸過像 GraalVM這樣多語言支援的 Runtime，細節有蠻多關於 Compiler 相關的知識，自己很多都忘了，需要在加強才行&lt;/p>
&lt;p>總結目前使用 GraalVM與 ES4X&lt;/p>
&lt;ol>
&lt;li>GraalVM 可以測試通過 npm 90%的 package，除了一些 native code 編寫的 library，其他不太需要擔心支援度問題；&lt;/li>
&lt;li>GraalVM 語法支援到最新的 ES2019/2020，這點還蠻不錯的&lt;/li>
&lt;li>GraalVM 性能對比與 V8不差多少，只是要一段 warm up 的時間，如果有跨語言整合需求，可以考慮看看&lt;/li>
&lt;li>ES4X 可以結合 Vert.x 與 GraalVM優點，得到大量的性能提升，但是專案還沒穩定，需要考量；&lt;br>
開發也必須用他的 Framework，使用 Express.js / Koa.js 等用戶無法無痛轉移&lt;/li>
&lt;/ol></description></item><item><title>Stripe 串金流教學 (上)</title><link>https://yuanchieh.page/posts/2018/2018-11-17-stripe-%E4%B8%B2%E9%87%91%E6%B5%81%E6%95%99%E5%AD%B8-%E4%B8%8A/</link><pubDate>Sat, 17 Nov 2018 07:53:08 +0000</pubDate><guid>https://yuanchieh.page/posts/2018/2018-11-17-stripe-%E4%B8%B2%E9%87%91%E6%B5%81%E6%95%99%E5%AD%B8-%E4%B8%8A/</guid><description>&lt;p>Stripe 是一間國際的金流支付公司，提供 client (Web / Android / iOS等)支付介面與 server-side API，用最短的時間就可以讓服務接上金流；&lt;br>
支援支付方式有Visa/Master Card等多間信用卡支付、Google Pay 、Apple Pay等等；&lt;br>
其中金流交易服務：&lt;/p>
&lt;ol>
&lt;li>入門會員服務Payment(交易)、Billing(開立發票)、Connect(中間商，向A收錢並轉給B多少錢)；&lt;/li>
&lt;li>其他需要多花錢的加值服務：&lt;br>
Sigma(支援SQL產生報表)、Altas(美國開公司)、Radar(金融詐騙偵測，預設有支援但付費有進階功能)&lt;/li>
&lt;li>邀請制的加值服務：&lt;br>
Terminal(整合硬體Reader，限定持有該硬體才能交易)、Issuing(可以自己發卡，Stripe 提供虛擬卡與實體卡發送)&lt;/li>
&lt;/ol>
&lt;p>這次主要嘗試 Payment / Billing 的串接，內容參考自&lt;a class="link" href="https://stripe.com/docs" target="_blank" rel="noopener"
>官方文件&lt;/a>，包含 client-side(採用 React) 與 server-side(採用 Nodejs SDK)，不得不說 Stripe對於開發者非常友善，文件非常好懂且各式語言與插件SDK都支援完整，所以只需要將SDK換掉我想以下的概念都是相同的。&lt;/p>
&lt;p>2018/11: 全球地區都可以付款，只是要開通 stripe帳戶只有26個國家，目前不支援台灣&lt;/p>
&lt;p>主要介紹 Payment / Billing 的概念，以及試圖理解 Stripe背後的運行機制&lt;/p>
&lt;h1 id="payment">Payment&lt;/h1>
&lt;p>分成兩步驟，在client-side 置入 stripe 付費元件(如 html form)，用戶輸入後會產生 token轉交給 server，接著 server 用此 token驗證並實際扣款&lt;/p>
&lt;p>在Stripe 中，它定義很多物件，每個物件都有各自參數與封裝的用法，所以文件非常的 OOP，所以對開發者來說很好理解與上手&lt;/p>
&lt;h2 id="checkout">Checkout&lt;/h2>
&lt;p>Checkout 是一個 Stripe 提供簡化過後的 Payment方式， 開發者只要接上 Stripe 提供的 Client SDK，用戶的交易細節就會直接丟給 Stripe 處理並以 Token方式回傳，開發者再去 Server Side 拿 Token做後續的應用。&lt;/p>
&lt;p>整合 Stripe Client-side有兩種模式 &lt;code>Simple&lt;/code>、&lt;code>Custom&lt;/code>&lt;/p>
&lt;h3 id="simple">Simple&lt;/h3>
&lt;p>用一個 &lt;code>&amp;lt;form/&amp;gt;&lt;/code> 定義如何轉交給token給 server，接著內部嵌入 stripe script 並定義參數，最基本的幾個參數&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">form&lt;/span> &lt;span class="na">action&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;your-server-side-code&amp;#34;&lt;/span> &lt;span class="na">method&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;POST&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://checkout.stripe.com/checkout.js&amp;#34;&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;stripe-button&amp;#34;&lt;/span> &lt;span class="na">data-key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;YOUR_KEY&amp;#34;&lt;/span> &lt;span class="na">data-amount&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;999&amp;#34;&lt;/span> &lt;span class="na">data-name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;COMPANY&amp;#34;&lt;/span> &lt;span class="na">data-description&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;Example charge&amp;#34;&lt;/span> &lt;span class="na">data-image&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://stripe.com/img/documentation/checkout/marketplace.png&amp;#34;&lt;/span> &lt;span class="na">data-locale&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;auto&amp;#34;&lt;/span> &lt;span class="na">data-currency&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;hkd&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">form&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>對，就這麼簡單就完成了，接著就是到 form定義的 server api 收 token資料&lt;/p>
&lt;h3 id="custom">Custom&lt;/h3>
&lt;p>如果希望有更細緻的用戶體驗，例如客製化自己的付費表單、顯示錯誤訊息等，就需要自己客製化，這部分也十分的簡單，用 vanilla js 也可以輕鬆完成&lt;/p>
&lt;p>這部分程式碼可以參考&lt;a class="link" href="https://stripe.com/docs/checkout#integration-custom" target="_blank" rel="noopener"
>文件&lt;/a>&lt;/p>
&lt;h4 id="參數設定">參數設定&lt;/h4>
&lt;p>以上的 Simple/Custome 就是一個基本的 Element，裡頭定義的 &lt;code>data-*&lt;/code> 屬性則會決定產生的 Checkout 物件屬性，常見的屬性有&lt;/p>
&lt;ol>
&lt;li>&lt;code>data-key [required] &lt;/code>當帳號成功激活後，會有兩組 key / secret 組合，分別是 &lt;code>live / test&lt;/code> ，對應就是正式機與測試機的概念&lt;/li>
&lt;li>&lt;code>token / source [required in custom mode]&lt;/code>&lt;br>
這兩個對應 callback function，分別對應收到 Token / Source，Token主要是server可以取得用戶的部分信用卡資料，Source則是代表用戶的其他付款方式(這些資料的取得要透過後續的參數設定)&lt;/li>
&lt;li>&lt;code>data-name / data-description / data-image / data-locale / data-amount [highly recommend]&lt;/code>&lt;br>
對應會顯示在 stripe 付費頁面的資訊，locale是設定表單語言&lt;/li>
&lt;li>&lt;code>data-zip-code / data-billing-address [highly recommend] &lt;/code>用戶的地址相關，Stripe推薦向用戶索取 zip-code，zip-code可以在後台設定當作 Radar的驗證條件，禁止可疑的Payment&lt;/li>
&lt;li>&lt;code>data-email / open / close [optional]&lt;/code> &lt;br>
還有一些欄位可以定義就翻文件了，open / close則是 callback function會在表單開啟與關閉時候呼叫，同樣只用於 custom mode&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>特別注意，開發者完全不需要接觸到用戶的信用卡資料，在沒有謹慎評估之前，不要妄想儲存用戶信用卡資料！&lt;br>
因為如果要「合格」儲存用戶信用卡資料，必須過 PCI-DSS 國際信用卡組織聯合規範的支付安全認證，但這部分規範嚴格，而且必須定期做漏洞掃描&lt;br>
所以 Stripe 也提到他們為了讓開發者便利，所以信用卡資料都還是通過他們，僅回傳 Token形式供後續扣款使用，不用再多煩惱這些資安上的問題&lt;/p>
&lt;/blockquote>
&lt;h4 id="server-side">Server-side&lt;/h4>
&lt;p>前端取得 Token 後，就可以往 server 丟，這個 Token是&lt;code>一次性扣款使用&lt;/code>，此外就等同於 Source的效力，也就是用於實際扣款的支付方式，後續會詳細介紹什麼是 Source&lt;/p>
&lt;p>以上是最基本的 Checkout 信用卡付款，因為信用卡是立即扣款就能知道結果，但如果需要支援如銀行轉帳等其他需要用戶額外授權與支付的流程，就需要以下更複雜的設計&lt;/p>
&lt;h2 id="多元支付方式">多元支付方式&lt;/h2>
&lt;p>Stripe透過產生 &lt;strong>Source&lt;/strong> 物件代表不同的支付方式，支付概念上可以分成&lt;br>
&lt;code>付款是同步與非同步完成(async vs sync) 錢如何從用戶轉出(push vs pull) 是否可重複使用(reusable)&lt;/code>&lt;/p>
&lt;p>例如說信用卡就是 &lt;code>sync + pull&lt;/code> ，當用戶輸入信用卡後，就會立刻執行扣款動作(sync)，就直接從用戶帳戶扣款或是產生支付紀錄(pull)&lt;/p>
&lt;p>而像銀行產生虛擬帳號提供ATM付款是 &lt;code>async + push&lt;/code>，用戶可能在過幾天才去付款(async)，而用戶本身需要主動去產生支付的動作(走到ATM前面，也就是 push)&lt;/p>
&lt;p>其他還有多種地域性的支付方式，因為不熟悉就不再多敘述，可以參考&lt;a class="link" href="https://stripe.com/docs/sources" target="_blank" rel="noopener"
>文件&lt;/a>&lt;/p>
&lt;p>Source 物件建立初始化為 &lt;code>source.pending&lt;/code>，有 webhook 可以接收狀態的改變，當用戶授權後會觸發&lt;code>source.chargeable&lt;/code> 、用戶拒絕授權&lt;code>source.failed&lt;/code> 、過期&lt;code>source.canceled&lt;/code>&lt;/p>
&lt;p>Source 此時僅代表支付方式，實際的支付要透過 Source 建立 &lt;strong>Charge&lt;/strong> 物件，Charge 物件同樣有幾個 webhook 可以串接，非同步支付初始化會是等待用戶支付&lt;code>charge.pending&lt;/code> 、成功收到用戶支付&lt;code>charge.succeeded&lt;/code> 、與支付失敗&lt;code>charge.failed&lt;/code>&lt;/p>
&lt;p>webhook 部分則是在後台設定。&lt;/p>
&lt;p>以下擷取官方案例，僅作於理解使用&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">stripe&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createSource&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;ach_credit_transfer&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">currency&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;usd&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">owner&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">email&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;jenny.rosen@example.com&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">},}).&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">result&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 這裡會回傳 Source基本資料如 id等
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 還有用戶需要知道的轉帳資訊如銀行帳號
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 掛webhook，指定source.chargeable
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">post&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;/webhook/to/source.chargable&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">read&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>某些支付方式是可以多次扣款，例如信用卡，Stripe 提供 Customer 概念，也就是可以創建一個 Customer 代表用戶，接著將 Source 綁定到該用戶上，一個用戶可以綁定多個 Source，到時候如果要扣款可以從 Source中選擇其中一個，相當的方便&lt;br>
需注意 Source 必須是 chargable 才可以扣款&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 建立 customer
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">stripe&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">customers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">create&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">email&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;paying.user@example.com&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">source&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;src_18eYalAHEMiOZZp1l9ZTjSU0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">},&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">customer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// asynchronously called
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 如果要扣款的話
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">stripe&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">charges&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">create&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">amount&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">1099&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">currency&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;eur&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">customer&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;cus_AFGbOSiITuJVDs&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">source&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;src_18eYalAHEMiOZZp1l9ZTjSU0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 可以不指定 source，會自動找 customer 預設的 source
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">charge&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// asynchronously called
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="小結">小結!&lt;/h3>
&lt;p>看到是不是有點暈頭轉向了呢，說好的 Stripe 很簡單呢？ &lt;br>
或許這也是種 &lt;code>simplicity but not simple&lt;/code>，要提供多元的支付方式勢必帶來邏輯的複雜性，但是我覺得 Stripe 透過 OOP梳理整個金融支付的過程，帶來極棒的 Developer Experience與 User Experience，接過台灣的紅藍綠你就會知道Stripe 有多棒了&lt;/p>
&lt;p>廢話不多說，讓我來重新整理一翻&lt;/p>
&lt;p>&lt;img src="https://yuanchieh.page/post/img/1__BD5C6MvB8lXS5LBrrsFFdw.jpeg"
loading="lazy"
>&lt;/p>
&lt;p>最一開始提的 Checkout 信用卡支付取得的Token，算是 Source的簡化版，我猜目的是為了讓最快速接串好金流的作法，而且信用卡的支付行為算是最簡單的。&lt;/p>
&lt;h2 id="billings">Billings&lt;/h2>
&lt;p>用於重複性扣款與開立發票&lt;/p>
&lt;h3 id="發票狀態流程">發票狀態流程&lt;/h3>
&lt;p>&lt;img src="https://yuanchieh.page/post/img/0__DelwxbDtN5ppfoxN.png"
loading="lazy"
alt="發票流程"
>&lt;/p>
&lt;p>Invoice，代表發票的物件，一張發票可以多筆款項 InvoiceItems，因為不同的財務規劃而有比較多的狀態可以設&lt;/p>
&lt;ol>
&lt;li>初始化為 &lt;code>draft&lt;/code> ，此時發票的設定都還可以做調整，確定後或是預設一個小時後會變成 &lt;code>open&lt;/code> ；&lt;br>
刪除就變成 &lt;code>deleted&lt;/code>&lt;/li>
&lt;li>&lt;code>open&lt;/code> 則代表發票確認了，如果用戶付款了可以調整為 &lt;code>paid&lt;/code> ，可以選擇觸發後續的發票寄送等流程；&lt;br>
如果發現用戶破產之類無法支付，可以在後台將此筆發票設定為 &lt;code>uncollectible&lt;/code> ；&lt;br>
如果發票有誤需要作廢，則設為 &lt;code>Void&lt;/code>&lt;/li>
&lt;/ol>
&lt;h3 id="一次性開立發票-one-offinvoiceshttpsstripecomdocsbillinginvoicesone-off">一次性開立發票 &lt;a class="link" href="https://stripe.com/docs/billing/invoices/one-off" target="_blank" rel="noopener"
>one-off invoices&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">stripe&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;stripe&amp;#34;&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="s2">&amp;#34;sk_test_AyGgRZ5ZZkIETGtHDI3f1GAE&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 先建立發票
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">stripe&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">invoiceItems&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">create&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">customer&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;cus_DqZrTNCO4puf2p&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">amount&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">2500&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">currency&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;usd&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">description&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;One-time setup fee&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">},&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">invoiceItem&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 針對某個用戶底下所有的InvoiceItems開立發票
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">stripe&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">invoices&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">create&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">customer&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;cus_4fdAW5ftNQow1a&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">auto_advance&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// auto-finalize this draft after ~1 hour
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">},&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">invoice&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// asynchronously called
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>auto_advance 算是很重要的參數，Stripe 預設在 Invoice 創建之後會有自動化的動作，如一小時後自動轉成 open**，並會向用戶自動扣款 (預設 Source)接著轉成** &lt;code>paid&lt;/code>，並Email 發送 Receipt 與 Invoice；&lt;br>
如果不想要記得設為 false&lt;/p>
&lt;p>在開立發票上 Stripe 靈活性頗高，每一筆 InvoiceItem 可以設定費用/折扣/稅率，InvoiceItem 可以指定所屬的 Invoice，或是預設歸類到該用戶的下筆 open 的Invoice中&lt;/p>
&lt;h3 id="訂閱制扣款服務-subscription">訂閱制扣款服務 subscription&lt;/h3>
&lt;p>有些雲端服務都是以年或是月的訂閱收費制度，Stripe 中可以定義 Product 與 Plan，例如說有一個 Product 是 SaaS服務&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">product&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">stripe&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">products&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">create&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;My SaaS Platform&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;service&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">metadata&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// store anything you want
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>針對這個 Product，可能會有許多的收費方式 Plan，可能是月繳/季繳/年繳或是有不同的適用期限、也可能有多種國家的不同定價等設定&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">plan&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">stripe&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">plans&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">create&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">product&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;prod_CbvTFuXWh7BPJH&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">nickname&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;SaaS Platform USD&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">currency&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;usd&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">interval&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;month&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">amount&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">10000&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Stripe 支援分層收費，可以指定多種模式，例如 當超過一個額度，每個商品變多少錢 / 又或是分多階層，超過部分算該價格的階梯形收費&lt;/p>
&lt;p>當先前的 Custome想要購買時，會創建一個訂閱 Subscription 的物件，並決定要訂閱的 Plan，如果要一個訂閱多個 Plan，這些 Plan必須幣別相同且收費區間一致；&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">subscription&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">stripe&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">subscriptions&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">create&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">customer&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;cus_4fdAW5ftNQow1a&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">coupon&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;free-period&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">tax_percent&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mf">6.34&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">trial_end&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">1542721841&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">items&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[{&lt;/span> &lt;span class="nx">plan&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;plan_CBXbz9i7AIOTzr&amp;#39;&lt;/span> &lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">plan&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;plan_IFuCu48Snc02bc&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">quantity&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">}],});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>此外，還有Coupon 可以設定，支援一次性 / 永久性 / 每次扣款用，還有 %跟數量的設定，相當有彈性&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">coupon&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">stripe&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">coupons&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">create&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">duration&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;once&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;free-period&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">percent_off&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">,});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>建立 subscription 在沒有停止之前，Stripe 會自動依照時間定期扣款，並自動開立發票(可關閉)，相當的方便。&lt;/p>
&lt;h3 id="升級或降級">升級或降級&lt;/h3>
&lt;p>如果用戶訂閱了普通版，在月中時突然想升級到專業版，該怎麼處理呢？&lt;br>
可以選擇將該用戶的 subscription 物件修改，更新訂閱的 Plan&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">stripe&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">subscriptions&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">update&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;sub_49ty4767H20z6a&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">cancel_at_period_end&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">items&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">subscription&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">items&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">plan&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;plan_CBb6IXqvTLXp3f&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">proration_date&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">proration_date&lt;/span> &lt;span class="c1">// Optional，詳看下方流程
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>更新容易，但是實際的扣款流程必須對應業務邏輯的處理，也就是收費的方式；&lt;/p>
&lt;p>例如幾種案例&lt;/p>
&lt;ol>
&lt;li>1/1開始訂閱 PlanA $30/mo，接著再 1/15 升級到 PlanB $45/mo&lt;br>
因為都是每月扣款，所以 Stripe 預設會在 2/1 開始收 PlanB 也就是 $45元，所以理論上應該在 2/1才將用戶升級到 PlanB的服務&lt;/li>
&lt;li>同上，但是用戶希望 1/15就升級到PlanB&lt;br>
這時候有兩種做法&lt;br>
a. 自己手動開立 Invoice，開立Invoice當下就會扣款並產生發票&lt;br>
b. 設立 Proration，這是 Stripe 提供的方法，也就是在 update subscription 時指定 &lt;code>proration_data&lt;/code> ，Stripe 會在下一次收費時間多開立這部分的金額&lt;/li>
&lt;li>如果用戶從月付費改成年付費，會立即扣款&lt;/li>
&lt;li>如果1/1已經扣款 PlanA的錢，用戶 1/15取消，Stripe 預設不會退款；&lt;br>
也可以設定 &lt;code>cancel_at_period_end&lt;/code>，讓用戶在月底才取消資格；&lt;br>
如果有額外產生的代付款項服，必須要手動清除 Invoice才不會在月底多扣款一次&lt;/li>
&lt;/ol>
&lt;h3 id="小結二">小結二&lt;/h3>
&lt;p>同整一下 Invoice / Invoice Item / Product / Plan / Subscription 關係&lt;/p>
&lt;p>&lt;img src="https://yuanchieh.page/post/img/1__1xDyQ3xWyQC7SLTMDY0srQ.jpeg"
loading="lazy"
>&lt;/p>
&lt;h3 id="總結">總結&lt;/h3>
&lt;p>如果要一次性付費，則可以使用 Payment，且 Payment 不需要綁定 Customer，同樣會開立發票；&lt;br>
以下更複雜的扣款方式方式要先在 Stripe 建立 Customer，可以利用 Invoice，分次建立 Invoice Item，最後再一次開在一張 Invoice 下完成扣款；&lt;br>
又或是建立 Product 與對應的付費機制 Plan，並用 Customer 角色訂閱 Subscription， Stripe會處理定期扣款等機制；&lt;br>
結合 Coupon 可以提供彈性的折價機制。&lt;/p>
&lt;p>總體上 Stripe 最讓我覺得方便的是 Dashboard 可以設定，這樣就可以少蓋一個後台自己麻煩，而且把Customer / Payment / Billing 等分門別類，以及個別子項目，非常好管理金流服務。&lt;/p></description></item><item><title>Express 與 Koa 如何處理錯誤</title><link>https://yuanchieh.page/posts/2018/2018-08-27-express-%E8%88%87-koa-%E5%A6%82%E4%BD%95%E8%99%95%E7%90%86%E9%8C%AF%E8%AA%A4/</link><pubDate>Mon, 27 Aug 2018 07:20:36 +0000</pubDate><guid>https://yuanchieh.page/posts/2018/2018-08-27-express-%E8%88%87-koa-%E5%A6%82%E4%BD%95%E8%99%95%E7%90%86%E9%8C%AF%E8%AA%A4/</guid><description>&lt;p>以前只注重把功能寫出來而已，慢慢地開始維護後發現一開始的系統規劃很重要，包含基本的 Loggin / Debugging / Error Handling，以及是否能將每個物件函式乾淨拆分[避免過多副作用無法編寫測試](&lt;a class="link" href="https://medium.com" target="_blank" rel="noopener"
>https://medium.com&lt;/a>&lt;/p>
&lt;p>此次主要研究 Express 與 Koa 框架下編寫如何做錯誤處理。&lt;/p>
&lt;h3 id="原本的寫法">原本的寫法&lt;/h3>
&lt;p>在最一開始使用Promise時，都習慣個別Promise.catch 處理錯誤；&lt;br>
之後用上了 async / await ，也都習慣用 try{}catch(){} 個別處理；&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">handle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Promise1&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">....).&lt;/span>&lt;span class="k">catch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">handleError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">handle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">await&lt;/span> &lt;span class="nx">Promise1&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>&lt;span class="k">catch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">hanleError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>這樣的寫法缺點在於每個函式都必須重複一樣的事情(不斷 try catch)，此外回傳 http status code / error message 很多都會重複，也是此次想要改變的問題，希望改以&lt;code>統一拋出錯誤並註冊一個Middleware專門處理錯誤&lt;/code>。&lt;/p>
&lt;h3 id="改善寫法">改善寫法&lt;/h3>
&lt;h4 id="koa">Koa&lt;/h4>
&lt;p>先來看Koa如何實作，以下是一般使用方式&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">Koa&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;koa&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">app&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Koa&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">use&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">async&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">next&lt;/span>&lt;span class="p">){...});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3000&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>當我們創建一個 Koa 的 instance app後，接著就會用 &lt;code>app.use&lt;/code> 註冊所有的 Middleware，最後就是 &lt;code>app.listen&lt;/code> 啟動&lt;/p>
&lt;p>在 Koa 原始碼當中， new Koa()中重要的一段原始碼是&lt;/p>
&lt;p>&lt;code>return fnMiddleware(ctx).then(handleResponse).catch(onerror);&lt;/code>&lt;/p>
&lt;p>Koa 處理的順序是 &lt;code>fnMiddleware將 app.use()註冊的全部Middleware轉成 Promise chain&lt;/code> -&amp;gt; &lt;code>hanldeResponse(呼叫 res.end送出 http respond)&lt;/code> / &lt;code>onerror (處理錯誤)&lt;/code>&lt;/p>
&lt;p>Promise chain(自定義的) 是指當 Koa Middleware 呼叫 next() 會遞迴呼叫下一個 Middleware，有興趣可以看我另一篇文章 &lt;a class="link" href="http://sj82516-blog.logdown.com/post/4720279" target="_blank" rel="noopener"
>Koa2 源碼解析 — 簡潔美麗的框架&lt;/a>&lt;/p>
&lt;p>這部分的錯誤處理又可拆成兩塊，一個是 app層級 一個是 ctx 層級；&lt;br>
在原始碼中 /koa/application.js，有預設基本的 onerror的錯誤處理，基本上就是打印出來，這部分是透過 &lt;code>app本身繼承 Event Emitter屬性並註冊 app.on(“error”) 事件後處理&lt;/code>&lt;/p>
&lt;p>另一方面當 Server 發生錯誤 Client 都會收到 &lt;code>Internal Server Error&lt;/code> 回應，是在 &lt;code>ctx.onerror 處理&lt;/code>，並 &lt;code>app.emit(“error”)&lt;/code>，定義於 /koa/context.js 中；&lt;br>
對應不同的Http Status Code 有不同的回應，這是基於&lt;code>statuses&lt;/code> 模組定義的。&lt;/p>
&lt;p>這裡比較混亂的是 app.onerror 與 ctx.onerror 呼叫時間是交錯的&lt;/p>
&lt;ol>
&lt;li>&lt;code>fnMiddleware(ctx).then(handleResponse).catch(onerror);&lt;/code> 的 onerror 是 &lt;code>(error) =&amp;gt; ctx.onerror(error)&lt;/code>&lt;/li>
&lt;li>&lt;code>ctx.onerror&lt;/code> 會 respond 預設的錯誤處理與 &lt;code>app.emit(“error”)&lt;/code>&lt;/li>
&lt;li>&lt;code>app.emit(“error”)&lt;/code> 是由 &lt;code>app.onerror&lt;/code> 去接收，這部分可以自訂 &lt;code>app.on(“error”, ()=&amp;gt;{自行處理})&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://yuanchieh.page/post/img/1__9GhLVsWnNyqmW__0yDv6wPg.jpeg"
loading="lazy"
>&lt;/p>
&lt;p>官方文件有寫到錯誤處理，用戶可註冊 error 事件就會改由用戶自己處理&lt;/p>
&lt;p>app.on(&amp;ldquo;error&amp;rdquo;, (err, ctx) =&amp;gt; {&amp;hellip;.})&lt;/p>
&lt;p>BUT!! 這邊的 ctx 是拿來看 context 資訊，如果是希望客製化回傳的錯誤是沒辦法的喔！&lt;br>
因為錯誤的狀態碼與內文 Reponse 是在 ctx.onerror 就處理掉。&lt;/p>
&lt;p>所以如果要自己處理整個錯誤，必須改用 Middleware ，記得&lt;code>第一個&lt;/code>就註冊錯誤處理才可以捕獲所有的錯誤，如以下&lt;/p>
&lt;h4 id="express">Express&lt;/h4>
&lt;p>Express 對比 Koa 是個比較全面的框架，內含了基本的 Middleware / Router，發送Response 方式也不像 Koa 是最後框架幫你發送；&lt;br>
而是必須自己用 &lt;code>res.send()&lt;/code> 之類的語法自行發送。&lt;/p>
&lt;h4 id="routing-機制">Routing 機制&lt;/h4>
&lt;p>詳請請參考 &lt;a class="link" href="https://cnodejs.org/topic/5746cdcf991011691ef17b88" target="_blank" rel="noopener"
>&lt;strong>express源码分析之Router&lt;/strong>&lt;/a>&lt;/p>
&lt;p>在Express 實例化之後有一個 Router Instance，接著每個路由會對映一個 Route，一個路由中可能有多個Middleware 稱為 Layer，資料結構就是陣列儲存。&lt;/p>
&lt;p>當一個 Request 近來會流過依照 Route 中的註冊順序流過 Layer ，每個Layer 判斷是否 Match URL，如果 Match 則處理，發生錯誤則走錯誤處理&lt;/p>
&lt;p>特別注意 正常處理與錯誤處理路徑是分開&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">use&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">next&lt;/span>&lt;span class="p">)=&amp;gt;{})&lt;/span> &lt;span class="nx">對應是&lt;/span> &lt;span class="nx">Layer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">handle_error&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">use&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">next&lt;/span>&lt;span class="p">)=&amp;gt;{})&lt;/span> &lt;span class="nx">對應是&lt;/span> &lt;span class="nx">Layer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">handle_request&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>當發現有 Middleware 呼叫了 next(err)後，就開始走錯誤處理，也就是後面的 Layer 都是呼叫 Layer.handle_error !&lt;/p>
&lt;p>在錯誤處理Express 採用 &lt;code>next(err)&lt;/code> 在Middleware 間傳遞錯誤，所以當 Middleware 或是 Routing 中有錯誤不能直接拋出或不處理，必須要用 &lt;code>try{..}catch(error){next(error)}&lt;/code> 處理；&lt;br>
但這樣就會很麻煩，因為都必須用 try catch 包起來，同理像是原生的 Nodejs module 如 fs 都沒有 Promise版，所以都要自己再 Promisify 後呼叫一樣的道理(麻煩)。&lt;br>
(&lt;a class="link" href="https://medium.com/@Abazhenov/using-async-await-in-express-with-node-8-b8af872c0016" target="_blank" rel="noopener"
>Using Async Await in Express with Node 9&lt;/a> 有提及)&lt;/p>
&lt;p>後來看到一個蠻 Hacking 的方式，&lt;a class="link" href="https://github.com/davidbanham/express-async-errors" target="_blank" rel="noopener"
>express-async-errors&lt;/a>，他會複寫Express/Layer.handle 方法，把每個 Routing Function 的錯誤統一用 &lt;code>next(error)&lt;/code> 傳遞&lt;/p>
&lt;p>他處理的方式也是很妙，簡化後可以這樣示意&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">pE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">async&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;error&amp;#34;&lt;/span>&lt;span class="p">)}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">fn&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">pE&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">call&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fn&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">fn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">catch&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">fn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">catch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>也就是如果發現註冊在Layer中的Function 是 Async Function，Async Function 執行後會回傳 Promise，接著就是用 &lt;code>fn &amp;amp;&amp;amp; fn.catch&lt;/code> 判斷是否為 Promise，如果是則幫忙補上 &lt;code>.catch((err) =&amp;gt; next(err))&lt;/code> ，蠻聰明的作法。&lt;/p>
&lt;p>根據 Express Routing 機制，ErrorHandling 在 Express 必須宣告在最後面&lt;/p>
&lt;h3 id="結語">結語&lt;/h3>
&lt;p>就個人觀點，Koa 相比 Express 確實是個更進步的框架，最主要是在 Middleware 構建與執行上，Koa 是先轉成類似 Promise Chain，並預設有做 Error Handling；&lt;br>
這比較符合現在以 Promise 為基礎構建的應用程式，也使得 Middleware 設計與錯誤處理直觀很多。&lt;/p>
&lt;p>而Express 必須很彆扭的使用 next(err)傳遞，對比就有點像 callback hell 的 error 放在 function 第一位的傳統寫法；&lt;br>
另外我也是現在才知道 &lt;code>app.use((err,req,res,next)=&amp;gt;{…})&lt;/code> /&lt;code>app.use((req,res,next)=&amp;gt;{…})&lt;/code> 差一個參數在 Express 中呼叫時機完全不同，整個錯誤處理弄的有點不太直觀。&lt;br>
看到Github Issue 討論有提到 Express@5 會加入更好的 async /await 支援，到時再來看看原始碼的更動。&lt;/p></description></item><item><title>使用 Jest 做API 單元測試的範例與細節</title><link>https://yuanchieh.page/posts/2018/2018-08-06-%E4%BD%BF%E7%94%A8-jest-%E5%81%9Aapi-%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6%E7%9A%84%E7%AF%84%E4%BE%8B%E8%88%87%E7%B4%B0%E7%AF%80/</link><pubDate>Mon, 06 Aug 2018 10:42:40 +0000</pubDate><guid>https://yuanchieh.page/posts/2018/2018-08-06-%E4%BD%BF%E7%94%A8-jest-%E5%81%9Aapi-%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6%E7%9A%84%E7%AF%84%E4%BE%8B%E8%88%87%E7%B4%B0%E7%AF%80/</guid><description>&lt;p> &lt;br>
之前寫測試因為沒有注意細節，導致非常難編寫單元測試；&lt;br>
改以 End-to-End測試，直接用docker 開DB輸入假資料，接著執行 Server App 對API一隻一隻測試。&lt;/p>
&lt;p>這樣的好處是測試方法與最終API調用的結果是一樣的，但缺點就是耗時較久，且邊寫測試的成本很高，要做到TDD之類的開發方式非常困難。&lt;/p>
&lt;p>另一方面之前用 Mocha，也算是 Nodejs 最大宗使用的測試框架，提供最基本的測試環境與語法定義，其餘的斷言、Mocking都要自己另外想辦法；&lt;br>
這次改用jest，由FB開源可供前後端的測試框架，此次順便分享如何建構程式碼才方便寫測試的小小心得。&lt;/p>
&lt;h3 id="jest-如何使用">Jest 如何使用&lt;/h3>
&lt;p>Jest 使用上有點像 Mocha + Chai，除了測試環境外還以自定義的斷言，提供多種編寫語意化的測試情境。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ./sum.js
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">exports&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">sum&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ./sum.test.js
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">‘&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">sum&lt;/span>&lt;span class="err">’&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">‘&lt;/span>&lt;span class="nx">adds&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="nx">to&lt;/span> &lt;span class="nx">equal&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="err">’&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)).&lt;/span>&lt;span class="nx">toBe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>// 執行&lt;br>
&amp;gt; jest&lt;/p>
&lt;p>另一點方便的是 Jest對於 Callback、Promise、Async/Await支援相當好，當初在Mocha中搞了一陣子….&lt;/p>
&lt;h3 id="邊寫測試的小細節">邊寫測試的小細節&lt;/h3>
&lt;p>使用Mock，透過預設情景與假資料，不用架設複雜的環境或是真的發出非同步請求，就可以達到測試的效果；&lt;br>
在使用Mock之前，有一點要注意 &lt;code>盡量把API包成函式或整理成物件方法而非直接呼叫&lt;/code>&lt;/p>
&lt;p>例如說在設計API: GET /user/:userId&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 不要這樣直接呼叫 mongoose 方法
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">getUserById&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">user&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">mongoose&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">findById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">…&lt;/span>&lt;span class="p">.)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;span class="c1">// 拆開成獨立的函式，方便後續做 Mock
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">getUserById&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">user&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">getUserByIdInModel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">getUserByIdInModel&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">mongoose&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">findById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">…&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>將非同步請求整理包成函式在調用有幾個好處&lt;br>
1. 解耦，多一層抽象化&lt;br>
試想今天是用MongoDB當作資料庫，但如果某天需要換成 PostgreSQL，把資料庫調用寫死在 API邏輯中會導致整份程式碼需要重寫；&lt;br>
但如果拆開成獨立函式，就只要改函式調用的DB Client與對應原本的回傳資料格式即可(親身經驗&lt;br>
2. 方便編寫測試&lt;br>
非同步請求本身也可以獨立寫測試 (如果需要的話&lt;/p>
&lt;p>接著看 Jest如何生成假資料。&lt;/p>
&lt;h4 id="mock">Mock&lt;/h4>
&lt;p>產生假資料可以分為 func&lt;br>
假設我們原本的程式碼為&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// index.js
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">api&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">‘&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">apiWrapper&lt;/span>&lt;span class="err">’&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">Obj&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">‘&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">objectWrapper&lt;/span>&lt;span class="err">’&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="nx">exports&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">callAPI&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">content&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">api&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">readFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">content&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;span class="nx">exports&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">callObject&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">obj&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Obj&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">“&lt;/span>&lt;span class="nx">jay&lt;/span>&lt;span class="err">”&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">obj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sayHi&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ./util/apiWrapper.js
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">fs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">‘&lt;/span>&lt;span class="nx">mz&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">fs&lt;/span>&lt;span class="err">’&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="nx">exports&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">readFile&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">params&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">readFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">“&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">txt&lt;/span>&lt;span class="err">”&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ./model/objWrapper.js
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">exports&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">class&lt;/span> &lt;span class="nx">Test&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>&lt;span class="nx">sayHi&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="err">\&lt;/span>&lt;span class="sb">`hi from &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">\`
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">}
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>基本上就是index.js對外輸出兩個函式，此兩個函式內有非同步請求與創建物件的方法，通常個人資料夾目錄是共用的非同步API Call會叫做 util，如果是資料庫相關的物件則是 model。&lt;/p>
&lt;p>接著看測試檔 index.test.js&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">index&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">“&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="err">”&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">jest&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">“&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">util&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">apiWrapper&lt;/span>&lt;span class="err">”&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">jest&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">“&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">model&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">objectWrapper&lt;/span>&lt;span class="err">”&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">“&lt;/span>&lt;span class="nx">mock&lt;/span> &lt;span class="nx">api&lt;/span> &lt;span class="nx">test&lt;/span>&lt;span class="err">”&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kr">async&lt;/span> &lt;span class="p">()=&amp;gt;{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">index&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">callAPI&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">res&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toBe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">“&lt;/span>&lt;span class="nx">jest&lt;/span>&lt;span class="err">”&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">“&lt;/span>&lt;span class="nx">mock&lt;/span> &lt;span class="nx">api&lt;/span> &lt;span class="nx">test2&lt;/span>&lt;span class="err">”&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kr">async&lt;/span> &lt;span class="p">()=&amp;gt;{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">index&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">callAPI&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">res&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toBe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">“&lt;/span>&lt;span class="nx">jest2&lt;/span>&lt;span class="err">”&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">“&lt;/span>&lt;span class="nx">mock&lt;/span> &lt;span class="nx">obj&lt;/span> &lt;span class="nx">test&lt;/span>&lt;span class="err">”&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kr">async&lt;/span> &lt;span class="p">()=&amp;gt;{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">index&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">callObject&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">res&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toBe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">“&lt;/span>&lt;span class="nx">hi&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="nx">jest&lt;/span>&lt;span class="err">”&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>這裡先定義了三個測試情境，並透過 jest.mock()顯式宣告 Mock檔案的位置；&lt;br>
接著注意 mock預設有固定的資料路徑與命名規則。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-md" data-lang="md">&lt;span class="line">&lt;span class="cl">index.js
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">index.test.js
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> — util
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | — — apiWrapper.js
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | — — &lt;span class="gs">__mocks__&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | — — apiWrapper.js
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>需注意mock要定義在檔案的同層 &lt;strong>mocks&lt;/strong> 資料夾下，並且檔名需要一致且輸出同樣的函式名。&lt;br>
如果是要 mock 如 ‘fs’等原生模組，直接定義在專案最上層的 __mocks__中即可。&lt;/p>
&lt;p>在 jest.fn()中，有需多 mock資料的方式
1. mockImplementation(fn)，可以取得函式調用的參數，並決定如何回傳&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ./util/__mocks__/apiWrapper.js
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">exports&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">readFile&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">jest&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fn&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">mockImplementation&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">params&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">params&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="err">“&lt;/span>&lt;span class="nx">jest&lt;/span>&lt;span class="err">”&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="err">“&lt;/span>&lt;span class="nx">jest2&lt;/span>&lt;span class="err">”&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>2. mockReturnValueOnce 一次性的回傳值&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">jest&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fn&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">mockReturnValueOnce&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">mockReturnValueOnce&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">‘&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="err">’&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>3. mockReturnValue 固定的回傳值&lt;/p>
&lt;p>有定義並宣告使用 mock，jest在執行原腳本時會改呼叫被 mock覆寫定義的函式 jest.fn()，達到產生假資料的效果，同時紀錄 fn()呼叫的次數與傳遞的參數；&lt;br>
物件則同樣也是透過改寫物件的呼叫方法。&lt;/p>
&lt;p>其餘的在程式碼中，&lt;a class="link" href="https://github.com/sj82516/very-simple-jest-example" target="_blank" rel="noopener"
>https://github.com/sj82516/very-simple-jest-example&lt;/a>&lt;/p></description></item><item><title>Jonathan Martin: Async patterns to scale your multicore JavaScript elegantly 總結與試驗</title><link>https://yuanchieh.page/posts/2018/2018-06-27-jonathan-martin-async-patterns-to-scale-your-multicore-javascript-elegantly-%E7%B8%BD%E7%B5%90%E8%88%87%E8%A9%A6%E9%A9%97/</link><pubDate>Wed, 27 Jun 2018 04:03:50 +0000</pubDate><guid>https://yuanchieh.page/posts/2018/2018-06-27-jonathan-martin-async-patterns-to-scale-your-multicore-javascript-elegantly-%E7%B8%BD%E7%B5%90%E8%88%87%E8%A9%A6%E9%A9%97/</guid><description>&lt;p>今天看到一部不錯的影片，主題是「利用Async Pattern 提升JS在多核心上的執行速度」，細拆個三個小節&lt;br>
1. 用Async IIFE 解決任務間相依與並行的問題&lt;br>
2. 用High Order Function概念設計 Semaphore，控制同時並行的任務數&lt;br>
3. 透過Worker 讓任務跑在個別Thread上，增加多核心的效能利用。&lt;/p>
&lt;h2 id="concurrency-vs-parallelism">Concurrency vs Parallelism&lt;/h2>
&lt;p>Concurrency 並行是指 &lt;strong>多個Task執行時間有重疊&lt;/strong>，也就是說Task1執行中時Task2也開始執行，算是一個概念性質上的定義，即使只有單一核心也可以透過Time Sharing 達到 Concurrency。&lt;/p>
&lt;p>Parallelism 並發，強調的是多個Task被分配到多個實體CPU上，同時且獨立執行。&lt;/p>
&lt;h2 id="async-iife">Async IIFE&lt;/h2>
&lt;p>&lt;a class="link" href="https://www.bignerdranch.com/blog/cross-stitching-elegant-concurrency-patterns-for-javascript/" target="_blank" rel="noopener"
>&lt;strong>Cross Stitching: Elegant Concurrency Patterns for JavaScript&lt;/strong>&lt;/a>&lt;/p>
&lt;p>最基本使用 async/await 就是一行一行寫，如&lt;/p>
&lt;blockquote>
&lt;p>await task1();&lt;br>
await task2();&lt;br>
await task3();…&lt;/p>
&lt;/blockquote>
&lt;p>但如果不同 task之間可能有相互依賴，如 task2 並須等到 task1結束才能進行/ 但也有些 task互相獨立可以並行，如果單純一行一行 async/await 會浪費等待的時間。&lt;/p>
&lt;blockquote>
&lt;p>困難的點在於任務複雜，如何漂亮地表示任務間的先後順序相依，並讓並行最大化&lt;/p>
&lt;/blockquote>
&lt;p>所以作者提到可以用 async iife ，也就是 async function 立即執行函式，async function 不論何時都會回傳 Promise，即使失敗也是回傳 Promise.reject；&lt;/p>
&lt;p>以下是我參考作者範例程式碼改寫的，主要比對原先的做法與async iife的差別，挑戰任務間相依的狀態如下&lt;/p>
&lt;p>&lt;img src="https://yuanchieh.page/post/img/1__v7aRZMMz__1__hTYVEGc4quQ.jpeg"
loading="lazy"
>&lt;/p>
&lt;p>原本就有的寫法是描述Task橫向的並行，所以我們會用 Promise.all([])將 TaskB/TaskC並行處理，但是這種寫法可讀性差，而且架構的方向也是不好的，&lt;code>因為 Task相依應該是垂直&lt;/code> ，像是 TaskD明明就只要等 TaskC完成就可以開始執行，但因為寫法所以要等到 TaskB也執行完成後，TaskD與TaskE才並行處理。&lt;/p>
&lt;p>所以使用 async iife 最大好處即是每個Task的相依性都被封裝的很直觀，主要是利用 Promise一宣告就執行的特性，像是&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">taskA&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kr">async&lt;/span> &lt;span class="p">()=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">timePromise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">“&lt;/span>&lt;span class="nx">TaskA&lt;/span> &lt;span class="nx">done&lt;/span>&lt;span class="err">”&lt;/span>&lt;span class="p">)})()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>此時taskA已經開始執行了，但是後續的code因為 &lt;code>await taskA&lt;/code>還是要等taskA結束才能繼續，所以一樣可以做到流程的控制；&lt;br>
這也是為什麼 taskB/taskC這樣寫可以並行處理，接著taskD因為只相依taskC所以在範例中會比taskB更早結束，非常漂亮的寫法。&lt;/p>
&lt;p>另外分享一個當初疑惑的點：taskC在 taskD / taskE被呼叫兩次，會不會就執行兩次?! &lt;br>
答案是不會，因為taskC本身是Promise，執行完一次後就會轉成 Promise.fufilled(or rejected) ，如果後續要用 await taskC取值就會立即回傳結果。&lt;/p>
&lt;h2 id="high-orderfunction">High Order Function&lt;/h2>
&lt;p>高階函式，定義是可接受函式當作參數的函式本身，如過往在數學上學到的 f(g(x))，在JS中結合closure 就可以有非常多的應用。&lt;/p>
&lt;p>Semaphore 信號機，用來控制有限的資源量，作者利用信號機，設計限制最大並行數的機制&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/nybblr/semaphorejs" target="_blank" rel="noopener"
>&lt;strong>nybblr/semaphorejs&lt;/strong>&lt;/a>&lt;/p>
&lt;p>程式碼只有40行左右但蠻精妙的，使用上
：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">Semaphore&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">s&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">async&lt;/span> &lt;span class="nx">_&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">“&lt;/span>&lt;span class="nx">start&lt;/span>&lt;span class="err">”&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">timePromise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3000&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">“&lt;/span>&lt;span class="nx">done&lt;/span>&lt;span class="err">”&lt;/span>&lt;span class="p">)})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">s&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">async&lt;/span> &lt;span class="nx">_&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">“&lt;/span>&lt;span class="nx">start&lt;/span>&lt;span class="err">”&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">timePromise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3000&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">“&lt;/span>&lt;span class="nx">done&lt;/span>&lt;span class="err">”&lt;/span>&lt;span class="p">)})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.....&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>對應程式碼，Semaphore(3) 將 task上限設為 3，接著回傳一個高階函式。&lt;br>
仔細看這個高階函式的第一行&lt;code>await acquire();&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">dispatch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">counter&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">tasks&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">counter&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">tasks&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">shift&lt;/span>&lt;span class="p">()();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">acquire&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">new&lt;/span> &lt;span class="nb">Promise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">resolve&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">tasks&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">resolve&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">setImmediate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">dispatch&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最有趣的地方莫過於作者用 acquire / dispatch 達到數量上的控制，acquire 將 Promise.resolve() 推上了 task陣列，接著觸發 dispatch，而dispatch只有在未達上限前可以執行 task.shift()的 function，這裡也就是Promise.resolve()，透過這個機制就可以去卡 &lt;code>await acquire()&lt;/code> 。&lt;/p>
&lt;h2 id="web-worker-and-multithread">Web Worker and Multi Thread&lt;/h2>
&lt;p>JS本身執行於 Main Thread上，其餘非同步API是由底層瀏覽器的Web API或 Nodejs Libuv等支援，最後透過 event loop 將 callback 返回 Main Thread 執行；&lt;/p>
&lt;p>但如果需要用JS執行費時的操作而沒有底層函式的支援(如自己編寫 Addon)，現在可以透過 Web Worker分開 Thread，避免阻擋 Main Thread。&lt;/p>
&lt;p>程式碼請參考：&lt;a class="link" href="http://jsfiddle.net/sj82516/uqcFM/350/" target="_blank" rel="noopener"
>http://jsfiddle.net/sj82516/uqcFM/350/&lt;/a>&lt;/p></description></item><item><title>Google Sheet API 與Google OAuth2 API授權研究</title><link>https://yuanchieh.page/posts/2018/2018-06-01-google-sheet-api-%E8%88%87google-oauth2-api%E6%8E%88%E6%AC%8A%E7%A0%94%E7%A9%B6/</link><pubDate>Fri, 01 Jun 2018 13:03:55 +0000</pubDate><guid>https://yuanchieh.page/posts/2018/2018-06-01-google-sheet-api-%E8%88%87google-oauth2-api%E6%8E%88%E6%AC%8A%E7%A0%94%E7%A9%B6/</guid><description>&lt;p>最近有個需求是希望可以將各網站的退款紀錄同步到Google Sheet上，方便PM與財務部門追蹤，相比於自建網站，Google Sheet 有方便的同步編輯 / 匯出匯入 / 登入權限管理等，就不必自己重造輪子，而且也不見得造得出來(汗&lt;/p>
&lt;p>整篇分成兩部分，第一是研究Google OAuth2 API授權部分，第二是Google Sheet API。&lt;/p>
&lt;h2 id="google-oauth2api授權">Google OAuth2 API授權&lt;/h2>
&lt;p>&lt;a class="link" href="https://developers.google.com/identity/protocols/OAuth2" target="_blank" rel="noopener"
>Google API授權&lt;/a>有兩種方式&lt;/p>
&lt;ol>
&lt;li>&lt;strong>OAuth 2.0：&lt;/strong>&lt;br>
如果是涉及用戶隱私資料，就必須走OAuth 2.0授權方式取得用戶授權；&lt;br>
例如說 Drive / Sheet / Doc / Google+ … 等等。&lt;/li>
&lt;li>&lt;strong>API keys：&lt;/strong>&lt;br>
如果是單純使用Google提供的對外服務，例如 Map / URL Shortener / Geocoding 等。&lt;br>
API Keys使用蠻簡單的，也不是這次使用重點，就不另外贅述。&lt;/li>
&lt;/ol>
&lt;p>這次要使用 Sheet API 就需走 OAuth 2.0授權，Google 支援多種&lt;a class="link" href="https://developers.google.com/identity/protocols/OAuth2" target="_blank" rel="noopener"
>OAuth 2.0 授權方式&lt;/a>：&lt;/p>
&lt;h3 id="server-side-webapp">Server-Side Web App&lt;/h3>
&lt;p>APP主動觸發，讓用戶登入Google帳號並授權，接著透過 redirect 或其他方式取得code，最後用code去換token。&lt;br>
這也是對終端用戶最為常見的授權方式。&lt;/p>
&lt;p>&lt;img src="https://yuanchieh.page/post/img/0__kYLCVa75Nl6Fb3dt.png"
loading="lazy"
alt="From Google"
>
From Google&lt;/p>
&lt;h3 id="applications-on-limited-input-devices">Applications on limited-input devices&lt;/h3>
&lt;p>適用於在沒有螢幕或是輸入的裝置，例如列印機、TV等嵌入式裝置&lt;/p>
&lt;p>&lt;img src="https://yuanchieh.page/post/img/0__ueo8fqWlyUkudIPy.png"
loading="lazy"
alt="From Google"
>
From Google&lt;/p>
&lt;p>這裡同樣是 App主動觸發，但變成回傳一個URL連結，用戶必須另外找支援瀏覽器裝置輸入URL並授權；&lt;br>
這裡因為 App(ex. TV)跟用戶授權的裝置(ex. 手機)不同，兩者辨識用戶方式透過 device code(“code” &amp;amp; URL -&amp;gt; User)，App透過polling不斷間隔請求Google才能知道該 device code 的用戶是否已經授權，後續流程就相同。&lt;/p>
&lt;p>但須注意此流程授權的權限不多，需要先評估，因為我專案需要 Sheet API授權，這個授權流程就不支援，所以無法採用。&lt;/p>
&lt;h3 id="server-to-server">Server-to-Server&lt;/h3>
&lt;p>&lt;img src="https://yuanchieh.page/post/img/0__013W__2kCyhYRycgb.png"
loading="lazy"
alt="From Google"
>
From Google&lt;/p>
&lt;p>在Google APIs Console中的憑證欄位，除了API金鑰 / OAuth 2.0 用戶端 ID ，第三個能夠創建的就是 &lt;code>服務帳戶金鑰&lt;/code>，服務帳號像是創建一個新的用戶，只是此用戶是被用於 Server 端授權，並透過 IAM 管理權限。&lt;/p>
&lt;p>透過服務帳號最大好處是應用程式是授權於服務帳號，而非個體用戶，像是遇到人員流動就不需要手動在管理授權；&lt;br>
而且也不需要在 Client又要跳出用戶授權頁面，非常適合用於對內的專案開發(此流程又稱為 two-legged OAuth)。&lt;/p>
&lt;p>也是我們這次會嘗試的流程之一。&lt;/p>
&lt;h3 id="long-livetoken">Long Live Token&lt;/h3>
&lt;p>授權後Google會回傳token，但token都是短期的只有一小時的壽命，Google並不像FB，&lt;code>不會核發長期無限期的Token&lt;/code> ，反之Google是不斷的透過 refresh token機制，不斷的核發短期Token，而refresh次數是沒有限制，也不需要用戶再次授權，所以可以長期儲存起來使用。&lt;/p>
&lt;p>但必須注意，如果發生以下幾點 refresh token機制會失效&lt;br>
1. 用戶取消對應用程式的授權&lt;br>
2. refresh token超過6個月沒有使用&lt;br>
3. 用戶更改帳號密碼且refresh token含Gmail的權限&lt;br>
4. 用戶擁有太多refresh token，目前是每個應用程式每用戶上限50個refresh token。&lt;br>
5. 用戶本身也存在著refresh token總數上限，但文件只寫到正常狀況不會發生，沒有明講多少。&lt;/p>
&lt;h3 id="實作">實作&lt;/h3>
&lt;p>這一步主要是先取得 access token與 refresh token。&lt;/p>
&lt;p>&lt;a class="link" href="https://developers.google.com/sheets/api/quickstart/nodejs?authuser=1&amp;amp;hl=zh-cn" target="_blank" rel="noopener"
>&lt;strong>Node.js Quickstart | Sheets API | Google Developers&lt;/strong>&lt;/a>&lt;/p>
&lt;p>Google Sheet API有個 Node.js 快速上手說明，並用 &lt;a class="link" href="https://github.com/google/google-api-nodejs-client" target="_blank" rel="noopener"
>google-api-nodejs-client&lt;/a>，運行後會在終端機出現授權URL，點擊後就可以取得token。&lt;/p>
&lt;p>但我個人不愛&lt;a class="link" href="https://github.com/google/google-api-nodejs-client" target="_blank" rel="noopener"
>google-api-nodejs-client&lt;/a> 的寫法，因為是採用層層 Callback的方式，還不如自己接REST API來得清爽。&lt;/p>
&lt;p>scope部分需要取得 &lt;code>[https://www.googleapis.com/auth/drive](https://www.googleapis.com/auth/drive) [https://www.googleapis.com/auth/spreadsheets](https://www.googleapis.com/auth/spreadsheets)&lt;/code>&lt;/p>
&lt;h3 id="oauth-20-for-web-server-applications-取得授權方式">OAuth 2.0 for Web Server Applications 取得授權方式&lt;/h3>
&lt;p>這個做法會透過瀏覽器取得用戶授權，並儲存 refresh_token，方便後續Server呼叫API使用。&lt;/p>
&lt;p>需注意Google OAuth2登入文件並沒有明講如何取得refresh_token，所以查了一下作法&lt;/p>
&lt;p>&lt;a class="link" href="https://stackoverflow.com/questions/10827920/not-receiving-google-oauth-refresh-token?utm_medium=organic&amp;amp;utm_source=google_rich_qa&amp;amp;utm_campaign=google_rich_qa" target="_blank" rel="noopener"
>&lt;strong>Not receiving Google OAuth refresh token&lt;/strong>&lt;/a>&lt;/p>
&lt;p>文章中的解答說要 &lt;code>approval_prompt=force&amp;amp;access_type=offline&lt;/code> 我嘗試是不行的，後來驗證結果是必須在 redirect URL中同時加入&lt;code>prompt=consent&amp;amp;access_type=offline&lt;/code>&lt;/p>
&lt;p>這部分比較簡單常見，就不贅述。&lt;/p>
&lt;h3 id="server-to-server-取得授權">Server-to-Server 取得授權&lt;/h3>
&lt;p>這部分Google文件強烈建議使用sdk而非 REST API，主要是因為Server-to-Server是透過加密JSON Web Tokens (JWTs)實作，如果出錯容易有資安風險，但範例還是採用接 REST API&lt;/p>
&lt;ol>
&lt;li>首先先到 &lt;a class="link" href="https://console.cloud.google.com/apis/credentials" target="_blank" rel="noopener"
>Google APIs Console&lt;/a> 加入憑證，這次要加入的是服務帳號金鑰，記得要下載 json檔的金鑰檔案&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://yuanchieh.page/post/img/1__1M5Qa1SGllse7Oghqfwl7Q.png"
loading="lazy"
>&lt;/p>
&lt;p>2. 接著到 IAM管理權限，找到剛才的服務帳號 Email，類似於 &lt;code>….@….iam.gserviceaccount.com&lt;/code>，並加入「Service Management 管理員」權限，才能操作API。&lt;/p>
&lt;p>3. 記得比剛才的服務帳號加入表單的共同編輯者。&lt;/p>
&lt;p>&lt;img src="https://yuanchieh.page/post/img/1__uobyyholII4abCvitAC9fg.png"
loading="lazy"
>
&lt;img src="https://yuanchieh.page/post/img/1__W0O65uuktYNrJcugUzVXqg.png"
loading="lazy"
alt="左圖為IAM管理 / 右圖為表單共用設定"
>
左圖為IAM管理 / 右圖為表單共用設定&lt;/p>
&lt;p>需注意 Server-to-Server不會有 refresh_token，token過期就必須重新產生JWT並取得新的token。&lt;/p>
&lt;p>文件中有提到，部分API可以用JWT而不用access token就可以呼叫，但同樣只有部分支援，所以避免踩坑還是統一用 access token。&lt;/p>
&lt;h3 id="sheet-api使用">Sheet API 使用&lt;/h3>
&lt;p>&lt;a class="link" href="https://developers.google.com/sheets/api/guides/concepts?authuser=1&amp;amp;hl=zh-cn" target="_blank" rel="noopener"
>&lt;strong>Introduction to the Google Sheets API | Sheets API | Google Developers&lt;/strong>&lt;/a>&lt;/p>
&lt;p>Google Sheet API有兩個部分：&lt;br>
1. 單純讀跟寫是在 &lt;a class="link" href="https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values?authuser=1&amp;amp;hl=zh-cn" target="_blank" rel="noopener"
>spreadsheets.values&lt;/a>底下&lt;br>
2. 其餘表單的屬性(合併欄位、更改欄位顏色等)等在 &lt;a class="link" href="https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets?authuser=1&amp;amp;hl=zh-cn" target="_blank" rel="noopener"
>spreadsheets&lt;/a>底下&lt;/p>
&lt;p>這次只有單純的讀寫，所以就只研究上者。&lt;/p>
&lt;p>操作表單API，首先需要先創建一個 Google表單，連結大概會是&lt;br>
&lt;a class="link" href="https://docs.google.com/spreadsheets/d/1dMJEsOayj7RxMJ4-dX7LnrDOxqNzi1WeV3ref6q2okY/edit#gid=0" target="_blank" rel="noopener"
>https://docs.google.com/spreadsheets/d/1dMJ…../edit#gid=0&lt;/a>&lt;/p>
&lt;p>&lt;code>1dMJ….&lt;/code> 代表是表單的ID，而 &lt;code>gid={id}&lt;/code>則是內頁的ID，在API用內頁名稱直接描述如 sheet1(也支援中文如 &lt;code>表單一&lt;/code>)；&lt;br>
整體上API操作可以 讀/寫/寫入文件最後(Append)/清除，每筆API都可以指定範圍如 &lt;code>A1:A5&lt;/code> ，就跟一般表單操作類似。&lt;/p>
&lt;p>程式碼請參考&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/sj82516/google-sheet-api-test" target="_blank" rel="noopener"
>&lt;strong>sj82516/google-sheet-api-test&lt;/strong>&lt;/a>&lt;/p>
&lt;p>在插入欄位的部分(API如 append / update)，有個參數可以指定Google Sheet如何處理輸入的欄位(valueInputOption)，可以指定為：&lt;br>
1. RAW，不處理完全依照輸入&lt;br>
2. USER_ENTERED，按照一般 Google Sheet輸入處理，如 &lt;code>=MAX(A1:A2)&lt;/code> 就會自動轉成公式，字串如果符合格式會被轉製成數字等。&lt;br>
3. INPUT_VALUE_OPTION_UNSPECIFIED，有趣的是這個&lt;code>預設值不能用&lt;/code>，API會報錯。&lt;/p>
&lt;p>另一個參數是處理 Concurrency 問題，InsertDataOption可以指定當遇到插入新欄時遇上手動更新時，選擇覆蓋 OVERWRITE 或是插入在新欄位 INSERT_ROWS。&lt;/p>
&lt;p>這次只有簡單用到 read / append 這兩個API，read可以指定範圍，append蠻有趣的如果有手動插入新欄，或是手動Delete整個表單，下次 append會自動正確的位置開始，這點倒不需要擔心。&lt;br>
其餘的寫入/更新/刪除都沒用上，不過在文件中的參考網頁有提供測試很方便。&lt;/p>
&lt;h3 id="補更插入新行於表單最上層">補更：插入新行於表單最上層&lt;/h3>
&lt;p>透過append是將新行插在表單最下層，但很多時候我們希望後面的資料出現在最上層，查了一下SO，有個解法是先創建新行再將值更新進去&lt;/p>
&lt;h3 id="push-notification">Push Notification&lt;/h3>
&lt;p>試想如果表單有新增資料，可以自動通知Server就能處理一些更進階的需求；Google Drive API 提供 Push Notification，而表單身為 Drive下的其中之一檔案型態，也有支援此功能，那就來研究一下吧。&lt;/p>
&lt;p>&lt;a class="link" href="https://developers.google.com/drive/api/v3/push" target="_blank" rel="noopener"
>&lt;strong>Push Notifications | Drive REST API | Google Developers&lt;/strong>&lt;/a>&lt;/p>
&lt;p>參考 &lt;a class="link" href="https://developers.google.com/drive/api/v2/reference/files/watch" target="_blank" rel="noopener"
>Files: watch&lt;/a> 文件說明，以下為操作步驟&lt;/p>
&lt;ol>
&lt;li>定義好callback url並通過網域驗證：&lt;br>
因為是webhook關係，所以必須定義好 Google回呼的 callback url，這部分需要再 Google API Console &amp;gt; 憑證 &amp;gt; 網域驗證申請，網域驗證有多種方式，最簡單是Google會提供一份html並指定要放在網域的對應路徑下，用於驗證網域是屬於本人的。&lt;/li>
&lt;li>呼叫API&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">axios&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">post&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="sb">`https://www.googleapis.com/drive/v2/files/&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">spreadsheet_id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">/watch\`, {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> type: &amp;#39;web_hook&amp;#39;,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> id: &amp;#39;channelIdAndShouldBeUnique&amp;#39;,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> address: \`&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">domain&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">/drive/webhook\`
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">});
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>address 放 callback url，id則是自行定義channel，到時候回呼用於驗證，type固定為 web_hook。&lt;/p>
&lt;p>Google回呼是用POST，但是內容是放在header，以 &lt;code>x-goog-&lt;/code> 開頭的標頭，反而body中沒有資料。&lt;/p>
&lt;p>但不得不說Google的Push Notification有點弱，因為他只會回傳哪個檔案改了、channel ID等，但不會有實質的改變內容，例如表單的哪一行修改、哪一行新增等等；&lt;br>
不過也是，因為這是廣泛的Drive檔案異動通知，所以不會有太細緻的內容呈現。&lt;/p>
&lt;h2 id="總結">總結&lt;/h2>
&lt;p>以上是Google OAuth2 授權模式研究，以及簡單的Google Sheet API研究，評估後符合專案的需求&lt;br>
1. Server主動append遞增資料&lt;br>
2. 保留Google表單原始功能&lt;br>
3. 取得Google表單異動觸發&lt;/p>
&lt;p>因為是對內專案，所以是採用 Server-to-Server授權方式。&lt;/p>
&lt;p>可惜不能得知更進一步的異動，只能自己重新抓資料，在Server端重新比對。&lt;/p>
&lt;p>另外Google Sheet還可以透過 App Script插入資料，客製化前端，之後有空再來研究。&lt;/p></description></item><item><title>Chrome extension 開發分享</title><link>https://yuanchieh.page/posts/2018/2018-05-15-chrome-extension-%E9%96%8B%E7%99%BC%E5%88%86%E4%BA%AB/</link><pubDate>Tue, 15 May 2018 09:56:14 +0000</pubDate><guid>https://yuanchieh.page/posts/2018/2018-05-15-chrome-extension-%E9%96%8B%E7%99%BC%E5%88%86%E4%BA%AB/</guid><description>&lt;p>昨天在 Android 手機上用 Youtube 分享影片到 LINE 聊天室給朋友，突然靈機一動覺得 APP 有這麼方便的分享機制，那我是不是可以在 Chrome 用 Extension 方式整合社群分享，按一個按鈕就可以把當前頁面的連結或文字快速分享；&lt;br>
正好之前也沒有開發過 Chrome extension，正好拿來練練技術，但果不其然在 Chrome extension shop 有看到很大量的社交分享工具了 OTZ &lt;br>
但還是不死心想要自己動手玩玩看&lt;/p>
&lt;p>參考資料：&lt;/p>
&lt;p>Chrome team 本身的官方教學還不賴&lt;/p>
&lt;p>&lt;a class="link" href="https://developer.chrome.com/extensions/getstarted" target="_blank" rel="noopener"
>&lt;strong>Getting Started Tutorial — Google Chrome&lt;/strong>&lt;/a>&lt;/p>
&lt;p>強者 &lt;a class="link" href="https://ithelp.ithome.com.tw/users/20079450/ironman" target="_blank" rel="noopener"
>羅拉拉&lt;/a>在 2016 年 IThome 鐵人賽的系列文，前半段把官方教學翻譯，後續加上作者個人開發分享，非常棒的教學。&lt;/p>
&lt;p>&lt;a class="link" href="https://ithelp.ithome.com.tw/users/20079450/ironman/1149" target="_blank" rel="noopener"
>&lt;strong>Chrome Extension 開發與實作 系列文章列表  — iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天&lt;/strong> &lt;/a>&lt;/p>
&lt;p>以下為個人開發簡略與簡化過後的筆記，所以要看詳細版還是看上附兩個文件&lt;/p>
&lt;h2 id="基本介紹">基本介紹&lt;/h2>
&lt;p>基本上開發 Chrome extension 跟寫網頁很類似，只是改了檔案結構、發布機制、API 調用多增加了 chrome.* 函式&lt;/p>
&lt;p>在 extension 開發中，目錄下必須先宣告 manifest.json，裡頭會註明 extension 的名稱/icon/所需權限等資料，還有不同時機對應執行的不同腳本&lt;/p>
&lt;p>基本上開發會有幾個頁面可以選擇&lt;/p>
&lt;ol>
&lt;li>background page 背景頁面：&lt;br>
基本上是常駐，從安裝插件之後就一直執行到插件被移除(不完全正確的描述，但基本上可以這樣理解)&lt;br>
所以會在 background 指定的 script 中執行套件安裝或更新，又或是初始化的一些程序&lt;/li>
&lt;li>popup page 彈出頁面：&lt;br>
也就是右上角的小圖標，點擊後產生的頁面，又細分成 browser-action / page-action；&lt;br>
browser-action 代表 Extesion 是普遍性在每個網站都可以用，而 page-action 則代表只針對某些特定網站使用，平常會自動呈現灰暗的 icon 直到顯示宣告 pageAction.show()，像是 vue-devtool 只有在網站使用 vue.js 才能使用。&lt;/li>
&lt;li>option page 選項頁面：&lt;br>
應用程式如果太過於複雜，希望有個選項頁可以供客戶客製化行為，可以採用&lt;/li>
&lt;li>content script：&lt;br>
在 Extension 中，只要有索取權限就可以對每個頁面注入 content script，進行 DOM 操作等一般 js script 會執行的動作，可以看成合法的 XSS 注入。&lt;/li>
&lt;/ol>
&lt;h2 id="實戰分享">實戰分享&lt;/h2>
&lt;p>&lt;a class="link" href="https://github.com/sj82516/quick-share" target="_blank" rel="noopener"
>&lt;strong>sj82516/quick-share&lt;/strong>&lt;/a>&lt;/p>
&lt;h3 id="定義與載入其他-script">定義與載入其他 script&lt;/h3>
&lt;p>可以參考 manifest.json，這裡我用了&lt;br>
background：event.js，主要註冊與定義右鍵按下出現的選單行為&lt;br>
popup page：分成 popup.html / popup.js，主要是定義瀏覽器右上角的工具列跳出視窗行為，並定義為 browser-action&lt;/p>
&lt;p>因為右鍵行為跟 popup 行為類似，所以我將行為收整成 util/handleShare.js，需注意在 background 中要使用其他 script 必須宣告在 manifest.json 中；&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;background&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;scripts&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;util/handleShare.js&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;event.js&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;persistent&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>而在 popup page 則以 &lt;code>&amp;lt;script src=&amp;quot;util/handleShare&amp;quot;&amp;gt;&lt;/code>加入 html 中即可。&lt;/p>
&lt;h3 id="另開新頁popup-script-與-content-script-溝通">另開新頁、Popup script 與 Content script 溝通&lt;/h3>
&lt;p>社群媒體分享必須另開該網站的新頁面，同時為了可以自動把反白選取的文字自動插入，在開啟新頁，首先要設法取得新頁面的 Tab，之後要執行 content script&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 先取得所有的分頁資料，可以透過 tab 的 url / title 找到指定頁面
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tabs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">query&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">active&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">},&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tabs&lt;/span>&lt;span class="p">){})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 必須確保分頁已經加載完成，這樣 content script 才有用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tabs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">onUpdated&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">tabId&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">info&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">tabId&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">factoryTab&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">info&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">status&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;complete&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 在該分頁注入 content script
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tabs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">executeScript&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">factoryTab&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">file&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;content/share.js&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">....&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面有個小 tricky 是必須要等到新分頁加載完成才可以執行 &lt;code>chrome.tabs.executeScript&lt;/code> ，否則會出現 tab is closed 之類的錯誤訊息!&lt;/p>
&lt;p>在跨 script 傳輸資料一次性可以使用&lt;code>sendMessage(tabId, message)&lt;/code>/ &lt;code>chrome.runtime.onMessage.addListener((message, sender, sendResponse)=&amp;gt;{})&lt;/code> &lt;br>
其餘方式可以在查詢文件。&lt;/p>
&lt;h3 id="結語">結語&lt;/h3>
&lt;p>開發一個簡單的 Chrome Extension 蠻有趣的，但也意外發現 Extension 的威力極為強大，尤其是可以注入 content script 這塊，所以搜尋一下 chrome store 可以找到例如密碼管理工具等應用，突然覺得一陣害怕因為整個 DOM 都被摸光了，甚至 cookie 再不小心授權出去後也都可以被讀取，在安裝插件上務必小心啊！ 尤其是沒有開源、非官方的插件更需要小心。&lt;/p>
&lt;p>不過我上傳的插件被 Google 認定為 Spam 不給上架……&lt;/p></description></item></channel></rss>