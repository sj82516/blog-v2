<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on Yuanchieh</title><link>https://yuanchieh.page/categories/python/</link><description>Recent content in Python on Yuanchieh</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 22 Nov 2021 01:21:40 +0000</lastBuildDate><atom:link href="https://yuanchieh.page/categories/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Python - 直接執行 package 下的 module 的錯誤</title><link>https://yuanchieh.page/posts/2021/2021-11-22-python-%E7%9B%B4%E6%8E%A5%E5%9F%B7%E8%A1%8C-package-%E4%B8%8B%E7%9A%84-module-%E7%9A%84%E9%8C%AF%E8%AA%A4/</link><pubDate>Mon, 22 Nov 2021 01:21:40 +0000</pubDate><guid>https://yuanchieh.page/posts/2021/2021-11-22-python-%E7%9B%B4%E6%8E%A5%E5%9F%B7%E8%A1%8C-package-%E4%B8%8B%E7%9A%84-module-%E7%9A%84%E9%8C%AF%E8%AA%A4/</guid><description>&lt;p>最近因為資料分析開始大量使用 Python，與同事協作在同一個 Package 下拆分不同 Module 實作，當我想直接執行 Module 遇上了 「ModuleNotFoundError: No module named」的錯誤，讓我開始想瞭解 Python 的 Package 系統運作的原理&lt;/p>
&lt;h2 id="python-package-載入方式">Python Package 載入方式&lt;/h2>
&lt;p>&lt;a class="link" href="https://docs.python.org/zh-tw/3/tutorial/modules.html" target="_blank" rel="noopener"
>官方文件：6. 模組 (Module)&lt;/a> 寫得很詳盡，模組的載入順序是根據 &lt;code>sys.path&lt;/code>，而 sys.path 依序由以下組成&lt;/p>
&lt;ol>
&lt;li>當前路徑&lt;/li>
&lt;li>環境變數 PYTHONPATH&lt;/li>
&lt;li>site-package&lt;/li>
&lt;/ol>
&lt;p>其中 site-package 是使用手動建置 package 所在位置 (&lt;code>pip install, python setup.py install&lt;/code>)，可能會有非常多組，每一位 user / venv 下又有對應的 site-package，參考 &lt;a class="link" href="https://stackoverflow.com/questions/122327/how-do-i-find-the-location-of-my-python-site-packages-directory?rq=1" target="_blank" rel="noopener"
>How do I find the location of my Python site-packages directory?&lt;/a>可以找出對應的路徑&lt;/p>
&lt;ol>
&lt;li>Global: &lt;code>$ python -m site&lt;/code>&lt;/li>
&lt;li>User: &lt;code>$ python -m site --user-site&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>所以 sys.path 決定了 package 載入的順序，例如當前路徑下 package 名稱與核心模組重複，那會以當前路徑優先載入；&lt;br>
所以能透過動態改變 sys.path 決定載入順序&lt;/p>
&lt;h2 id="為什麼直接執行-package-下的-module-會失敗">為什麼直接執行 Package 下的 Module 會失敗&lt;/h2>
&lt;p>在 Python 中，import 可以選擇完整的 Module 路徑或是相對路徑，而路徑會受到執行檔案的 sys.path 與 __package__ 的影響，相關的 magic method 為&lt;/p>
&lt;ol>
&lt;li>&lt;code>__name__&lt;/code>：Module 的完整名稱&lt;/li>
&lt;li>&lt;code>__package__&lt;/code>：決定相對路徑 import 的解析路徑，如果檔案是 Package，則 __package__ 會等於 __name__；&lt;br>
如果是 Module 則 __package__ 是所屬的 Package 名稱；&lt;br>
如果 Module 是 &lt;code>top-level modules&lt;/code>，也就是 &lt;code>__name__ == __main__&lt;/code>，則 __package__ 為 None&lt;/li>
&lt;/ol>
&lt;p>以下參考自 &lt;a class="link" href="https://stackoverflow.com/questions/16981921/relative-imports-in-python-3" target="_blank" rel="noopener"
>Relative imports in Python 3&lt;/a>，假設目前的專案目錄是&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">main.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mypackage/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> __init__.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mymodule.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> myothermodule.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在 myothermodule.py 中，載入 mymodule，可以透過完整路徑 &lt;code>import mypackage.mymodule&lt;/code> 或是相對路徑 &lt;code>import .mymodule&lt;/code> 的方式，但如果直接執行 $python myothermodule 會分別遇到以下錯誤&lt;/p>
&lt;ol>
&lt;li>完整路徑&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">ModuleNotFoundError: No module named &lt;span class="s1">&amp;#39;mypackage&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>相對路徑&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">ImportError: attempted relative import with no known parent package
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>完整路徑的錯誤原因是因為 sys.path 中沒有 mypackage，sys.path 是加入&lt;code>script 當前的資料夾 (./mypackage)&lt;/code>而不是 ./，所以 mypackage 是無法被載入的；&lt;br>
相對路徑的錯誤則是因為當前 myothermodule.py 是 top-level module， __package__ 被設定為 None，所以相對路徑解析會失敗&lt;/p>
&lt;h2 id="如何解決">如何解決&lt;/h2>
&lt;p>分別針對完整路徑與相對路徑提出解決方案&lt;/p>
&lt;h3 id="1-完整路徑">1. 完整路徑&lt;/h3>
&lt;p>既然完整路徑是因為 sys.path 沒有包含到 package 的上層路徑而沒有被載入，那就加上去即可&lt;/p>
&lt;p>Python 鼓勵但不強制 import 都要放在檔案開頭&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">sys&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">pathlib&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Path&lt;/span> &lt;span class="c1"># if you haven&amp;#39;t already done so&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">file&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Path&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="vm">__file__&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">resolve&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">parent&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parents&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Additionally remove the current file&amp;#39;s directory from sys.path&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">remove&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">except&lt;/span> &lt;span class="ne">ValueError&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># Already removed&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">mypackage.mymodule&lt;/span> &lt;span class="c1"># 成功 Import&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="直接安裝-package">直接安裝 package&lt;/h4>
&lt;p>另一個作法是透過 setuptools 直接安裝相依的套件，這樣就能從 site-package import，但這改動相對麻煩些，且變成套件要額外管理反而麻煩&lt;/p>
&lt;h3 id="2-相對路徑">2. 相對路徑&lt;/h3>
&lt;h4 id="使用--m-執行">使用 -m 執行&lt;/h4>
&lt;p>直接指定完整的 package.module 路徑 &lt;code>$ python -m mypackage.myothermodule&lt;/code>，此時 __package__ 會被正確解析成 mypackage，參考 &lt;a class="link" href="https://www.python.org/dev/peps/pep-0366/" target="_blank" rel="noopener"
>PEP366&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>By adding a new module level attribute, this PEP allows relative imports to work automatically if the module is executed using the -m switch&lt;/p>
&lt;/blockquote>
&lt;h4 id="手動指定">手動指定&lt;/h4>
&lt;p>手動實作 PEP366 的提案，參考&lt;a class="link" href="https://gist.github.com/vaultah/d63cb4c86be2774377aa674b009f759a" target="_blank" rel="noopener"
>PEP366_boilerplate.py&lt;/a>，加入對應的 sys.path 並指定 __package__，達到跟 -m 相同的效果&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">sys&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nn">importlib&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">pathlib&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Path&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">import_parents&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">level&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">global&lt;/span> &lt;span class="n">__package__&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">file&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Path&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="vm">__file__&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">resolve&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">parent&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">top&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parents&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">level&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">top&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">remove&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">except&lt;/span> &lt;span class="ne">ValueError&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># already removed&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">__package__&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;.&amp;#39;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parts&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">top&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parts&lt;/span>&lt;span class="p">):])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">importlib&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">import_module&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">__package__&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># won&amp;#39;t be needed after that&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;__main__&amp;#39;&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">__package__&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">import_parents&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">level&lt;/span>&lt;span class="o">=...&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="結語">結語&lt;/h2>
&lt;p>第一次接觸 Python 覺得頗神奇，有許多 magic number 以及獨樹一格的 package 管理方式，包含 virtual env 的使用等&lt;/p></description></item></channel></rss>